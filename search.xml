<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C/C++链接库生成与使用：Linux篇</title>
    <url>//posts/f8c82266/</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<h3 id="本文的组成">本文的组成</h3>
<ul>
<li>环境及其编码区别</li>
<li>静态链接库的生成与使用</li>
<li>动态链接库的生成与使用</li>
</ul>
<h3 id="关于测试文件">关于测试文件</h3>
<p>此次测试将在前篇 <a href="/posts/f8c82266">C/C++链接库生成与使用：Windows篇</a> 的基础上进行修改，目标是使其能够同时兼容 <strong>Windows 环境</strong>和 <strong>Linux 环境</strong>以及 <strong>Windows 上的拟 Linux 编译器环境</strong>。</p>
<p>最终我们将得到两套测试文件，一套兼容以上环境的静态链接库测试文件和一套兼容以上环境的动态链接库测试文件。</p>
<h3 id="系列文章">系列文章</h3>
<ul>
<li><a href="/posts/6e4f8e4a">C/C++ 链接库（准备工作）</a></li>
<li><a href="/posts/16812f7c">C/C++ 链接库简介</a></li>
<li><a href="/posts/5aa06c69">C/C++ 链接库生成与使用：Windows 篇</a></li>
<li><strong>本文</strong>：<a href="#">C/C++ 链接库生成与使用：Linux 篇</a></li>
</ul>
<h2 id="一、环境及其编码区别">一、环境及其编码区别</h2>
<p>我电脑上的 C/C++ 环境一共有 3 套：</p>
<ul>
<li>纯 Windows 环境：即 Windows 系统 + MSVC 编译器</li>
<li>Windows 上的拟 Linux 编译器环境：Windows 系统 + MinGW 编译器</li>
<li>纯 Linux 环境：采用 WSL 的方案在 Windows 上建立的 Linux 虚拟机 + GCC 编译器</li>
</ul>
<p>在中文环境下的 Windows 采用的编码通常是<code>gb2312</code>，我们就将其当作 Windows 默认编码（实际在不同地区编码都不同）。而 Linux 环境则通常是<code>utf-8</code>。</p>
<p>在 CLion 创建的新文件默认编码是<code>utf-8</code>，这也是实际项目中最常用的编码。</p>
<p>这些环境如果不对其进行干预，那么 MSVC 可以识别<code>gb2312</code>、<code>utf-8(with BOM)</code>编码，而不能正确识别<code>utf-8</code>编码，生成的程序使用的编码将采用<code>gb2312</code>编码，这是 Windows 终端使用的编码。如果不加干预使用 MSVC 编译一个<code>utf-8</code>编码的文件，首先无法正确识别，所以程序中如果有中文，那么一定会乱码。</p>
<p>而 MinGW 和 GCC 默认只识别<code>utf-8</code>编码，同时生成<code>utf-8</code>编码的程序。如果是在纯 Linux 环境下，那么不会出现乱码，比如我们使用的 WSL 环境。如果在 Windows 环境下使用 MinGW 编译器，虽然能够正确识别文件编码，但生成的<code>utf-8</code>编码的程序在 Windows 的<code>gb2312</code>编码环境下运行还是会乱码。</p>
<p>我将在后续测试环节介绍测试代码时对其进行修改，使其能够在这三种环境下都不乱码。</p>
<p>如果你想了解更多关于乱码的问题和解决方案，可参考我的另一篇文章：<a href="/posts/c77f42f7">编程中乱码出现的原因</a></p>
<p>另外，开始测试之前，我们首先将配置修改为 WSL 环境：</p>
<p><img src="01.png" alt="01"></p>
<h2 id="二、静态链接库的生成与使用">二、静态链接库的生成与使用</h2>
<h3 id="1-测试文件">1. 测试文件</h3>
<div class="tabs" id="static-files"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#static-files-1">include/SimpleWork-Static.h</button></li><li class="tab"><button type="button" data-href="#static-files-2">src/SimpleWork-Static/SimpleWork-Static.cpp</button></li><li class="tab"><button type="button" data-href="#static-files-3">src/SimpleWork-Static/CMakeLists.txt</button></li><li class="tab"><button type="button" data-href="#static-files-4">src/main.cpp</button></li><li class="tab"><button type="button" data-href="#static-files-5">CMakeLists.txt</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="static-files-1"><p>和 Windows 下相比，没有需要修改的地方：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LIBRARYTEST_SIMPLEWORK_STATIC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIBRARYTEST_SIMPLEWORK_STATIC_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数加法</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">addTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数乘法</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">timeTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//LIBRARYTEST_SIMPLEWORK_STATIC_H</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="static-files-2"><p>和 Windows 下相比，没有需要修改的地方：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SimpleWork-Static.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数加法</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">addTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> one + two;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数乘法</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">timeTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> one * two;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="static-files-3"><p>和 Windows 下相比，没有需要修改的地方：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">project</span>(SimpleWork-Static)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> STATIC SimpleWork-Static.cpp)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="static-files-4"><p>和 Windows 下相比，没有需要修改的地方：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SimpleWork-Static.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入两个数字，我将算出它们的和与乘积：&quot;</span>;</span><br><span class="line">    <span class="type">double</span> one, two;</span><br><span class="line">    std::cin &gt;&gt; one &gt;&gt; two;</span><br><span class="line">    std::cout &lt;&lt; one &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; two &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; <span class="built_in">addTwo</span>(one, two) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; one &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; two &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; <span class="built_in">timeTwo</span>(one, two) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="static-files-5"><p>根据我们刚才所说的不同环境下的编码，我们需要对<code>CMakeLists.txt</code>进行一些修改。</p>
<p>首先为了能够同时处理纯 Linux 环境和 纯 Windows 环境，我们先像这样修改：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.22</span>)</span><br><span class="line"><span class="keyword">project</span>(LibraryTest)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要修改的代码 - start</span></span><br><span class="line"><span class="keyword">if</span> (WIN32)</span><br><span class="line">    <span class="keyword">add_compile_options</span>(/source-charset:utf-<span class="number">8</span>)</span><br><span class="line"><span class="keyword">endif</span> ()</span><br><span class="line"><span class="comment"># 需要修改的代码 - end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_subdirectory</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/SimpleWork-Static)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PUBLIC SimpleWork-Static)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们添加了一个条件判断，当在 Windows 系统上时，才添加编译器选项，使 MSVC 能够识别<code>utf-8</code>的源文件编码，另外，我们不需要修改它生成的程序的编码。而在纯 Linux 环境时，我们不需要添加任何选项，GCC 编译器可以正确识别<code>utf-8</code>编码源文件并且生成<code>utf-8</code>编码的程序，然后在 Linux 的<code>utf-8</code>编码的命令行运行。</p>
<p>此时，如果我们还要使用<code>Windows + MinGW</code>环境，那么该部分还需要修改：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(WIN32)</span><br><span class="line">    <span class="keyword">if</span>(MSVC)</span><br><span class="line">        <span class="keyword">add_compile_options</span>(/source-charset:utf-<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">elseif</span>(CMAKE_COMPILER_IS_GNUCXX)</span><br><span class="line">        <span class="keyword">execute_process</span>(<span class="keyword">COMMAND</span> PowerShell <span class="string">&quot;[System.Text.Encoding]::Default.BodyName&quot;</span> OUTPUT_VARIABLE USER_CHARSET OUTPUT_STRIP_TRAILING_WHITESPACE)</span><br><span class="line">        <span class="keyword">add_compile_options</span>(-fexec-charset=<span class="variable">$&#123;USER_CHARSET&#125;</span>)</span><br><span class="line">    <span class="keyword">endif</span> ()</span><br><span class="line"><span class="keyword">endif</span> ()</span><br></pre></td></tr></table></figure>
<p>首先，如果是 Windows 环境，那么还需要判断使用的是什么编译器，如果是 MSVC，那就添加对应的编译器选项，如果是 GCC（MinGW），那么首先获取当前 Windows 命令行的默认编码，然后再将其添加到编译器选项中。</p>
<p>纯 Linux 环境仍然不需要进行任何修改。</p>
<p>至此，CMake 配置文件就算是改完了，完整的代码如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.22</span>)</span><br><span class="line"><span class="keyword">project</span>(LibraryTest)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(WIN32)</span><br><span class="line">    <span class="keyword">if</span>(MSVC)</span><br><span class="line">        <span class="keyword">add_compile_options</span>(/source-charset:utf-<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">elseif</span>(CMAKE_COMPILER_IS_GNUCXX)</span><br><span class="line">        <span class="keyword">execute_process</span>(<span class="keyword">COMMAND</span> PowerShell <span class="string">&quot;[System.Text.Encoding]::Default.BodyName&quot;</span> OUTPUT_VARIABLE USER_CHARSET OUTPUT_STRIP_TRAILING_WHITESPACE)</span><br><span class="line">        <span class="keyword">add_compile_options</span>(-fexec-charset=<span class="variable">$&#123;USER_CHARSET&#125;</span>)</span><br><span class="line">    <span class="keyword">endif</span> ()</span><br><span class="line"><span class="keyword">endif</span> ()</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_subdirectory</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/SimpleWork-Static)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PUBLIC SimpleWork-Static)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<p>以上测试文件已经可以用于本文开始所介绍的 3 种环境下的静态链接库。</p>
<h3 id="2-生成静态链接库">2. 生成静态链接库</h3>
<p>按照和前篇一样的做法，我们选择好配置文件，然后点击构建，将得到如下的文件：</p>
<p><img src="02.png" alt="02"></p>
<p>可以看到在 Linux 环境下生成的静态链接库以<code>.a</code>后缀结尾，和 Windows 下的<code>.lib</code>不同。</p>
<h3 id="3-使用静态链接库">3. 使用静态链接库</h3>
<p>按照和前篇一样的做法，选择测试程序的配置文件，然后点击构建，得到如下文件：</p>
<p><img src="03.png" alt="03"></p>
<p>在 Linux 的可执行程序通常没有后缀，实际上 Linux 也并不靠后缀来识别文件。</p>
<p>点击运行，得到结果如下：</p>
<p><img src="04.png" alt="04"></p>
<h3 id="4-模拟使用第三方静态链接库">4. 模拟使用第三方静态链接库</h3>
<p>我们删除生成的可执行程序以及库的实现代码，接口头文件和生成的库文件保留。</p>
<p>然后修改根目录下的<code>CMakeLists.txt</code>，删去<code>add_subdirectory</code>一行即可。</p>
<p>点击构建和运行，将得到正常输出，此处不再截图演示。</p>
<h2 id="三、动态链接库的生成与使用">三、动态链接库的生成与使用</h2>
<h3 id="1-测试文件-2">1. 测试文件</h3>
<p>为了兼容纯 Windows 环境、Windows + MinGW 环境以及纯 Linux 环境，动态链接库的测试代码有较大的变化：</p>
<div class="tabs" id="dynamic-files"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#dynamic-files-1">include/SimpleWork-Dynamic.h</button></li><li class="tab"><button type="button" data-href="#dynamic-files-2">src/SimpleWork-Dynamic/SimpleWork-Dynamic.cpp</button></li><li class="tab"><button type="button" data-href="#dynamic-files-3">src/SimpleWork-Dynamic/CMakeLists.txt</button></li><li class="tab"><button type="button" data-href="#dynamic-files-4">src/main.cpp</button></li><li class="tab"><button type="button" data-href="#dynamic-files-5">CMakeLists.txt</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="dynamic-files-1"><p>在前篇中我们将动态链接库的头文件已经优化过了，但那时只能用于纯 Windows 环境。</p>
<p>如果是纯 Linux 或者 Windows + MinGW 环境，那么使用的头文件和静态链接库的头文件是完全一样的，而且不分导出和导入的区别，为了能够兼容这三种环境，我们将动态链接库的头文件代码修改如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LIBRARYTEST_SIMPLEWORK_DYNAMIC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIBRARYTEST_SIMPLEWORK_DYNAMIC_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _MSC_VER</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> EXPORT</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DLL_API _declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DLL_API _declspec(dllimport)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// EXPORT</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DLL_API</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _MSC_VER</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数加法</span></span><br><span class="line"><span class="function">DLL_API <span class="type">double</span> <span class="title">addTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数乘法</span></span><br><span class="line"><span class="function">DLL_API <span class="type">double</span> <span class="title">timeTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//LIBRARYTEST_SIMPLEWORK_DYNAMIC_H</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dynamic-files-2"><p>和前篇优化后的动态链接库的测试文件没有区别：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> EXPORT</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SimpleWork-Dynamic.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数加法</span></span><br><span class="line"><span class="function">DLL_API <span class="type">double</span> <span class="title">addTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> one + two;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数乘法</span></span><br><span class="line"><span class="function">DLL_API <span class="type">double</span> <span class="title">timeTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> one * two;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dynamic-files-3"><p>和前篇没有区别：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">project</span>(SimpleWork-Dynamic)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> SHARED SimpleWork-Dynamic.cpp)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dynamic-files-4"><p>和前篇没有区别：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SimpleWork-Dynamic.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入两个数字，我将算出它们的和与乘积：&quot;</span>;</span><br><span class="line">    <span class="type">double</span> one, two;</span><br><span class="line">    std::cin &gt;&gt; one &gt;&gt; two;</span><br><span class="line">    std::cout &lt;&lt; one &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; two &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; <span class="built_in">addTwo</span>(one, two) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; one &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; two &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; <span class="built_in">timeTwo</span>(one, two) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dynamic-files-5"><p>其余部分和前篇没有区别，但在添加编译器选项处按照本篇静态链接库部分进行修改：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.22</span>)</span><br><span class="line"><span class="keyword">project</span>(LibraryTest)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(WIN32)</span><br><span class="line">    <span class="keyword">if</span>(MSVC)</span><br><span class="line">        <span class="keyword">add_compile_options</span>(/source-charset:utf-<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">elseif</span>(CMAKE_COMPILER_IS_GNUCXX)</span><br><span class="line">        <span class="keyword">execute_process</span>(<span class="keyword">COMMAND</span> PowerShell <span class="string">&quot;[System.Text.Encoding]::Default.BodyName&quot;</span> OUTPUT_VARIABLE USER_CHARSET OUTPUT_STRIP_TRAILING_WHITESPACE)</span><br><span class="line">        <span class="keyword">add_compile_options</span>(-fexec-charset=<span class="variable">$&#123;USER_CHARSET&#125;</span>)</span><br><span class="line">    <span class="keyword">endif</span> ()</span><br><span class="line"><span class="keyword">endif</span> ()</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_subdirectory</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/SimpleWork-Dynamic)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PUBLIC SimpleWork-Dynamic)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h3 id="2-生成动态链接库">2. 生成动态链接库</h3>
<p>和之前一样，我们选择库配置文件，然后点击构建，可以看到在 Linux 环境下生成的文件和使用 MSVC 生成的文件有很大差别：</p>
<p><img src="05.png" alt="05"></p>
<p>首先，不像 MSVC 会生成许多其他类型的文件。另外，在 Linux 下并不需要导入库，所以在<code>lib</code>目录下没有生成任何内容。</p>
<h3 id="3-使用动态链接库">3. 使用动态链接库</h3>
<p>切换到测试程序的配置文件，然后点击运行，不出意外将正常运行，此处不再截图展示。</p>
<h3 id="4-模拟使用第三方动态链接库">4. 模拟使用第三方动态链接库</h3>
<p>我们保留头文件和生成的<code>.so</code>文件，然后删除库的实现代码。再修改根目录下 CMake 配置文件，将<code>add_subdirectory</code>一行删除即可。</p>
<p>如果此时直接点击构建，应该会出现错误，在链接时无法找到库文件。</p>
<p>是因为首先 Linux 下不生成导入库，所以在链接时使用的也是这个动态链接库文件，而我们在 CMake 配置中只将<code>lib</code>目录添加进了链接库查找目录，所以在<code>bin</code>目录下的动态链接库文件无法被查找到。</p>
<p>为了解决这个问题，可以在 CMake 配置文件中再添加一个链接库查找路径<code>bin</code>，或者将动态链接库文件复制到<code>lib</code>目录下。</p>
<p>然后我们再构建+运行，应该能得到正常输出了。</p>
]]></content>
      <categories>
        <category>C/C++</category>
        <category>链接库</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>链接库</tag>
        <tag>动态链接库</tag>
        <tag>静态链接库</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++链接库生成与使用：Windows 篇</title>
    <url>//posts/5aa06c69/</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<h3 id="本文的组成">本文的组成</h3>
<ul>
<li>测试文件及目录结构</li>
<li>静态链接库的生成与使用</li>
<li>动态链接库的生成与使用</li>
</ul>
<h3 id="系列文章">系列文章</h3>
<ul>
<li><a href="/posts/6e4f8e4a">C/C++ 链接库（准备工作）</a></li>
<li><a href="/posts/16812f7c">C/C++ 链接库简介</a></li>
<li><strong>本文</strong>：<a href="#">C/C++ 链接库生成与使用：Windows 篇</a></li>
<li><a href="/posts/f8c82266">C/C++ 链接库生成与使用：Linux 篇</a></li>
</ul>
<h2 id="一、测试文件及目录结构">一、测试文件及目录结构</h2>
<p>在 Windows 环境下的测试文件比较复杂，根据不同情况会有不同的测试文件，故本文将测试文件放在具体的情况中进行介绍。</p>
<p>关于目录结构，主要如下图所示：</p>
<p><img src="01.png" alt="01"></p>
<p>在根目录下有两个目录和一个 CMake 配置文件，其中<code>include</code>目录下放置的是所有的头文件，包括接口头文件在内。<code>src</code>目录下放置的是程序源码，包括可执行程序的源码和库的实现代码。<code>src</code>下有几个子目录，每个子目录都是一个库的实现代码。</p>
<p>以上就是本测试主要的目录结构。本测试项目是为了创建一个实现了<code>addTwo</code>的加法函数和<code>timeTwo</code>的乘法函数的库，库名为<code>SimpleWork</code>，然后在一个可执行程序中使用这两个函数。</p>
<h2 id="二、静态链接库的生成与使用">二、静态链接库的生成与使用</h2>
<h3 id="1-测试文件">1. 测试文件</h3>
<p>在 Windows 环境下，静态链接库的测试文件比较简单：</p>
<div class="tabs" id="static-lib-files"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#static-lib-files-1">include/SimpleWork-Static.h</button></li><li class="tab"><button type="button" data-href="#static-lib-files-2">src/SimpleWork-Static/SimpleWork-Static.cpp</button></li><li class="tab"><button type="button" data-href="#static-lib-files-3">src/SimpleWork-Static/CMakeLists.txt</button></li><li class="tab"><button type="button" data-href="#static-lib-files-4">src/main.cpp</button></li><li class="tab"><button type="button" data-href="#static-lib-files-5">CMakeLists.txt</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="static-lib-files-1"><p>这是这个静态链接库的实现头文件同时也是接口头文件，内容如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LIBRARYTEST_SIMPLEWORK_STATIC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIBRARYTEST_SIMPLEWORK_STATIC_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数加法</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">addTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数乘法</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">timeTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//LIBRARYTEST_SIMPLEWORK_STATIC_H</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="static-lib-files-2"><p>这个文件是<code>SimpleWork</code>静态链接库版本的实现代码，需要先包含<code>include/SimpleWork-Static.h</code>头文件。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SimpleWork-Static.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数加法</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">addTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> one + two;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数乘法</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">timeTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> one * two;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里包含头文件时并没有按照相对位置进行指定，具体原因是因为根目录下 CMake 配置文件的一项配置，后续将具体介绍。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="static-lib-files-3"><p>这也是一个 CMake 的配置文件，和根目录下的配置文件不同，这个文件属于根项目的子项目，所以写法简略了很多步骤：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">project</span>(SimpleWork-Static)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> STATIC SimpleWork-Static.cpp)</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li><code>project(SimpleWork-Static)</code>定义了这个子项目的名称</li>
<li><code>add_library(${PROJECT_NAME} STATIC SimpleWork-Static.cpp)</code>表示本子项目执行的工作即创建一个链接库。其中第一个参数决定了生成的库文件的名字，这是一个宏变量，表示<code>project</code>配置中填写的参数。第二个参数<code>STATIC</code>表示生成的链接库是一个静态链接库。第三个参数声明了参与生成库文件的实现代码文件，注意此处是一个相对地址而非单纯的文件名，由于本配置文件和实现代码在同一个目录，所以只有一个文件名。</li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="static-lib-files-4"><p>这个文件是用来测试库文件的程序的源代码，需要先包含库的接口头文件：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SimpleWork-Static.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入两个数字，我将算出它们的和与乘积：&quot;</span>;</span><br><span class="line">    <span class="type">double</span> one, two;</span><br><span class="line">    std::cin &gt;&gt; one &gt;&gt; two;</span><br><span class="line">    std::cout &lt;&lt; one &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; two &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; <span class="built_in">addTwo</span>(one, two) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; one &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; two &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; <span class="built_in">timeTwo</span>(one, two) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和上面一样，这里包含头文件也未按照相对路径给出，原因和上述相同，后续将详细解释。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="static-lib-files-5"><p>根目录下的 CMake 配置文件：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.22</span>)</span><br><span class="line"><span class="keyword">project</span>(LibraryTest)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_subdirectory</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/SimpleWork-Static)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PUBLIC SimpleWork-Static)</span><br></pre></td></tr></table></figure>
<p>上方文件其中一些配置在 <a href="/posts/16812f7c">C/C++ 链接库简介</a> 一文中已经介绍过了，此处介绍一些其他的配置项：</p>
<ul>
<li><code>set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)</code>：这一项以及后两项用来设置生成的程序放置的目录。其中第一项设置的是可执行程序放置的位置，第二项设置的是静态链接库文件放置的位置，第三项是动态链接库文件放置的位置。其中<code>${PROJECT_SOURCE_DIR}</code>也是一个宏变量，表示项目根目录的位置。</li>
<li><code>include_directories(${PROJECT_SOURCE_DIR}/include)</code>用于添加头文件的查找路径，这条表示将根目录下的<code>include</code>目录添加到头文件查找路径中，将头文件放到这个目录中，这样在包含头文件时就可以直接输入头文件名字而不用使用路径了。</li>
<li><code>link_directories(${PROJECT_SOURCE_DIR}/lib)</code>用于添加库文件的查找路径，语法和<code>include_directories</code>类似</li>
<li><code>add_subdirectory(${PROJECT_SOURCE_DIR}/src/SimpleWork-Static)</code>：在生成测试程序的可执行程序之前，我们需要先生成库文件，而我们的库刚刚写了一个子项目的 CMake 配置文件，此处我们只需要在主配置文件中添加子项目（<code>add_subdirectory</code>），参数中填写子项目配置文件的目录地址即可。</li>
<li><code>target_link_libraries(${PROJECT_NAME} PUBLIC SimpleWork-Static)</code>：生成可执行文件时，需要指定生成可执行文件需要链接的库，即该指令。参数1指定可执行程序的名字，参数2可以忽视，参数3表示需要链接到该可执行程序的库名字。</li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h3 id="2-生成链接库">2. 生成链接库</h3>
<p>按照下图所示点击构建按钮，先选择配置文件，此处我们选择生成库文件的配置文件而不是生成可执行程序的配置文件。然后点击构建按钮即可：</p>
<p><img src="02.png" alt="02"></p>
<p>可以看到，已经生成好了静态库文件：</p>
<p><img src="03.png" alt="03"></p>
<h3 id="3-使用链接库">3. 使用链接库</h3>
<p>这次我们切换配置文件到可执行程序的配置文件进行构建：</p>
<p><img src="04.png" alt="04"></p>
<p>不出意外，将生成以下文件：</p>
<p><img src="05.png" alt="05"></p>
<p>然后我们点击执行按钮，如果你的源文件编码是<code>UTF-8(without BOM)</code>，那么可能执行出来会乱码：</p>
<p><img src="06.png" alt="06"></p>
<p>其原因可以查看我的另一篇文章：<a href="/posts/c77f42f7">编程中乱码出现的原因</a></p>
<p>此处采用的解决办法是向编译器添加一些选项，由于我们并非直接使用编译器，而是调用IDE的编译功能，所以我们往编译器添加选项的方法是修改根目录配置文件：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.22</span>)</span><br><span class="line"><span class="keyword">project</span>(LibraryTest)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_compile_options</span>(/source-charset:utf-<span class="number">8</span>)		<span class="comment"># 添加这一行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_subdirectory</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/SimpleWork-Static)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PUBLIC SimpleWork-Static)</span><br></pre></td></tr></table></figure>
<p>然后重新进行构建，再点击运行，得到运行结果如下：</p>
<p><img src="07.png" alt="07"></p>
<p>可以看到程序正常运行。</p>
<h3 id="4-模拟使用第三方静态链接库">4. 模拟使用第三方静态链接库</h3>
<p>为了模拟第三方静态链接库，首先我们需要删除该库的实现部分，包括实现代码<code>SimpleWork-Static.cpp</code>和与它同目录下的子项目配置文件<code>CMakeLists.txt</code>，然后删去根目录下配置文件<code>CMakeLists.txt</code>中的<code>add_subdirectory</code>一行即可。</p>
<p>需要注意的是，我们要保留之前生成的<code>.lib</code>库文件和接口头文件，库文件仍然放在<code>lib</code>目录下，接口头文件仍然放在<code>include</code>目录下。</p>
<p>此时我们的项目就像是拿到了一个第三方的静态链接库，我们只有它的接口头文件和静态库文件，测试代码通过接口头文件导入库的两个函数，但我们并不知道它的具体实现。</p>
<p>我们再次构建并运行一下这个项目，可以得到正常输出：</p>
<p><img src="08.png" alt="08"></p>
<h2 id="三、动态链接库的生成与使用">三、动态链接库的生成与使用</h2>
<h3 id="1-测试文件-2">1. 测试文件</h3>
<p>和静态链接库的测试文件不同，在 Windows 环境下的动态链接库通常需要两套头文件。其中一套用于编写库实现代码时导入，一套用于用户使用动态链接库时使用。<br>
这次我们需要6个文件，其中大部分和之前还是相同的内容：</p>
<div class="tabs" id="dynamic-lib-files"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#dynamic-lib-files-1">include/SimpleWork-Export.h</button></li><li class="tab"><button type="button" data-href="#dynamic-lib-files-2">include/SimpleWork-Import.h</button></li><li class="tab"><button type="button" data-href="#dynamic-lib-files-3">src/SimpleWork-Dynamic/SimpleWork-Dynamic.cpp</button></li><li class="tab"><button type="button" data-href="#dynamic-lib-files-4">src/SimpleWork-Dynamic/CMakeLists.txt</button></li><li class="tab"><button type="button" data-href="#dynamic-lib-files-5">src/main.cpp</button></li><li class="tab"><button type="button" data-href="#dynamic-lib-files-6">CMakeLists.txt</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="dynamic-lib-files-1"><p>所需头文件之一，在生成库文件时使用：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LIBRARYTEST_SIMPLEWORK_EXPORT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIBRARYTEST_SIMPLEWORK_EXPORT_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数加法</span></span><br><span class="line">_declspec(dllexport) <span class="function"><span class="type">double</span> <span class="title">addTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数乘法</span></span><br><span class="line">_declspec(dllexport) <span class="function"><span class="type">double</span> <span class="title">timeTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//LIBRARYTEST_SIMPLEWORK_EXPORT_H</span></span></span><br></pre></td></tr></table></figure>
<p><strong>需要注意的是</strong>在函数前我们添加了一个<code>_declspec(dllexport)</code>，这是 Windows 要求的语法，或者更严谨的说是 MSVC 编译器要求的语法，以声明这些函数是需要导出到库中的函数。</p>
<p>正常使用 MSVC 编译动态链接库的情况下是会生成一个<code>.lib</code>后缀的导入库以及一个<code>.dll</code>后缀的动态链接库，在使用这个库的时候，我们需要链接的是这个<code>.lib</code>后缀的导入库而不是<code>.dll</code>后缀的动态链接库。而如果不添加这个声明，在生成库文件的时候将无法生成<code>.lib</code>后缀的导入库，也就无法使用这个库。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dynamic-lib-files-2"><p>所需头文件之一，作为接口头文件给出，使用者需要包含：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LIBRARYTEST_SIMPLEWORK_IMPORT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIBRARYTEST_SIMPLEWORK_IMPORT_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数加法</span></span><br><span class="line">_declspec(dllimport) <span class="function"><span class="type">double</span> <span class="title">addTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数乘法</span></span><br><span class="line">_declspec(dllimport) <span class="function"><span class="type">double</span> <span class="title">timeTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//LIBRARYTEST_SIMPLEWORK_IMPORT_H</span></span></span><br></pre></td></tr></table></figure>
<p>和前者类似，函数的前面都添加了一个<code>_declspec(dllimport)</code>，用于向 MSVC 编译器说明这些函数用来导入到程序中。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dynamic-lib-files-3"><p>库的实现代码，需要包含导出用头文件：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SimpleWork-Export.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数加法</span></span><br><span class="line">_declspec(dllexport) <span class="function"><span class="type">double</span> <span class="title">addTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> one + two;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数乘法</span></span><br><span class="line">_declspec(dllexport) <span class="function"><span class="type">double</span> <span class="title">timeTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> one * two;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dynamic-lib-files-4"><p>用于生成动态链接库的子项目配置文件，与实现代码放在同一层目录：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">project</span>(SimpleWork-Dynamic)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> SHARED SimpleWork-Dynamic.cpp)</span><br></pre></td></tr></table></figure>
<p>注意<code>add_library</code>第二个参数变成了<code>SHARED</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dynamic-lib-files-5"><p>测试程序的代码，需要包含导入用头文件：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SimpleWork-Import.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入两个数字，我将算出它们的和与乘积：&quot;</span>;</span><br><span class="line">    <span class="type">double</span> one, two;</span><br><span class="line">    std::cin &gt;&gt; one &gt;&gt; two;</span><br><span class="line">    std::cout &lt;&lt; one &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; two &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; <span class="built_in">addTwo</span>(one, two) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; one &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; two &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; <span class="built_in">timeTwo</span>(one, two) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dynamic-lib-files-6"><p>根项目配置文件：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.22</span>)</span><br><span class="line"><span class="keyword">project</span>(LibraryTest)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_compile_options</span>(/source-charset:utf-<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_subdirectory</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/SimpleWork-Dynamic)		<span class="comment"># 有更改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PUBLIC SimpleWork-Dynamic)	<span class="comment"># 有更改</span></span><br></pre></td></tr></table></figure>
<p>大部分和静态链接库的配置文件相同，在<code>add_subdirectory</code>处需要将子目录修改一下，具体根据你的目录名而定。</p>
<p>在<code>target_link_libraries</code>处，由于我们的库名变成了<code>SimpleWork-Dynamic</code>，所以将需要链接的库名也修改一下。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h3 id="2-生成链接库-2">2. 生成链接库</h3>
<p>还是像生成静态链接库一样，选择生成库的配置，然后点击构建即可：</p>
<p><img src="09.png" alt="09"></p>
<p>这次会生成以下文件：</p>
<p><img src="10.png" alt="10"></p>
<p>其中有一些本篇未介绍过的后缀文件，它们都与我们的测试没有太大关系。</p>
<h3 id="3-使用链接库-2">3. 使用链接库</h3>
<p>选择测试项目配置文件，然后点击构建，正常情况下会生成以下文件：</p>
<p><img src="12.png" alt="12"></p>
<p>其中有我们需要的可执行程序，点击执行按钮，正常情况下得到以下输出：</p>
<p><img src="13.png" alt="13"></p>
<h3 id="4-模拟使用第三方动态链接库">4. 模拟使用第三方动态链接库</h3>
<p>首先，我们需要保留的文件有接口头文件<code>SimpleWork-Import.h</code>，动态链接库文件<code>SimpleWork-Dynamic.dll</code>，导入库文件<code>SimpleWork-Dynamic.lib</code>。</p>
<p>其中<code>.lib</code>还是放在<code>lib</code>目录下，<code>.dll</code>放在<code>bin</code>目录下，<code>.h</code>放在<code>include</code>目录下。</p>
<p>此时我们可以删除<code>lib</code>、<code>bin</code>及<code>include</code>目录下其他文件，同时库的实现部分也可以删掉了。</p>
<p>最后效果如图所示：</p>
<p><img src="14.png" alt="14"></p>
<p>最后还需要修改一下<code>CMakeLists.txt</code>中的配置，将<code>add_subdirectory</code>一行删去即可。</p>
<p>然后我们选择测试项目，点击构建，会看到测试程序仍然正常生成，点击运行，得到如下输出：</p>
<p><img src="15.png" alt="15"></p>
<blockquote>
<p>为了更好地理解 Windows 下生成和使用动态链接库的原理，你还可以自行进行下面两个测试：</p>
<ul>
<li>把导入库文件<code>.lib</code>也删除掉，然后点击构建，看看结果如何。不出意外应该是无法成功构建。</li>
<li>保留<code>.lib</code>，把<code>.dll</code>删除掉，点击构建，再点击运行，看看结果如何。正常情况下应该能够成功构建，但无法运行。</li>
</ul>
</blockquote>
<h2 id="四、动态链接库测试代码优化">四、动态链接库测试代码优化</h2>
<p>在 Windows 环境下我们进行动态链接库的测试一共使用了 2 个头文件。实际上，我们可以做到只用一个头文件用于所有情况，那就是使用 C/C++ 的<strong>宏定义</strong>。</p>
<p>在动态链接库中我们需要根据导入和导出的情况不同使用两套头文件（<code>SimpleWork-Import.h</code>、<code>SimpleWork-Export.h</code>），我们可以通过宏定义以及预处理器的条件语句来将这两个文件合成一个文件<code>SimpleWork-Dynamic.h</code>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LIBRARYTEST_SIMPLEWORK_DYNAMIC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIBRARYTEST_SIMPLEWORK_DYNAMIC_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加这一段</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> EXPORT</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DLL_API _declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DLL_API _declspec(dllimport)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数加法</span></span><br><span class="line"><span class="function">DLL_API <span class="type">double</span> <span class="title">addTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span>;		<span class="comment">// 将具体的声明符修改为宏变量 DLL_API</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数乘法</span></span><br><span class="line"><span class="function">DLL_API <span class="type">double</span> <span class="title">timeTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span>;		<span class="comment">// 同上</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//LIBRARYTEST_SIMPLEWORK_DYNAMIC_H</span></span></span><br></pre></td></tr></table></figure>
<p>在使用的过程中，我们需要向实现代码中添加<code>#define EXPORT</code>语句以使用<code>_declspec(dllexport)</code>的值，再包含这个头文件。注意<code>#define</code>要放在<code>#include &quot;SimpleWork-Dynamic&quot;</code>之前。</p>
<p>而在用户使用这个库时，只需要包含这个头文件即可，无需进行其他改动。</p>
<p>这样在动态链接库的测试中，就可以只使用一个头文件了。</p>
<p>在此基础上，我们更新一下其他的文件：</p>
<div class="tabs" id="files"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#files-1">include/SimpleWork-Dynamic.h</button></li><li class="tab"><button type="button" data-href="#files-2">src/SimpleWork-Dynamic/SimpleWork-Dynamic.cpp</button></li><li class="tab"><button type="button" data-href="#files-3">src/SimpleWork-Dynamic/CMakeLists.txt</button></li><li class="tab"><button type="button" data-href="#files-4">src/main.cpp</button></li><li class="tab"><button type="button" data-href="#files-5">CMakeLists.txt</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="files-1"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LIBRARYTEST_SIMPLEWORK_DYNAMIC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIBRARYTEST_SIMPLEWORK_DYNAMIC_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> EXPORT</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DLL_API _declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DLL_API _declspec(dllimport)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数加法</span></span><br><span class="line"><span class="function">DLL_API <span class="type">double</span> <span class="title">addTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数乘法</span></span><br><span class="line"><span class="function">DLL_API <span class="type">double</span> <span class="title">timeTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//LIBRARYTEST_SIMPLEWORK_DYNAMIC_H</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="files-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> EXPORT		<span class="comment">// 添加这一行</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SimpleWork-Dynamic.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数加法</span></span><br><span class="line"><span class="function">DLL_API <span class="type">double</span> <span class="title">addTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> one + two;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两数乘法</span></span><br><span class="line"><span class="function">DLL_API <span class="type">double</span> <span class="title">timeTwo</span><span class="params">(<span class="type">double</span> one, <span class="type">double</span> two)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> one * two;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要在包含头文件前<code>#define EXPORT</code>，从而使用<code>_declspec(dllexport)</code>这一值代替<code>DLL_API</code>。</p>
<p>头文件包含放在宏定义之后，是因为我们需要包含的头文件中的函数声明前也用<code>_declspec(dllexport)</code>代替<code>DLL_API</code>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="files-3"><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">project</span>(SimpleWork)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> SHARED SimpleWork-Dynamic.cpp)</span><br></pre></td></tr></table></figure>
<p>这个文件不需要修改。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="files-4"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SimpleWork-Dynamic.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;请输入两个数字，我将算出它们的和与乘积：&quot;</span>;</span><br><span class="line">    <span class="type">double</span> one, two;</span><br><span class="line">    std::cin &gt;&gt; one &gt;&gt; two;</span><br><span class="line">    std::cout &lt;&lt; one &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; two &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; <span class="built_in">addTwo</span>(one, two) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; one &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; two &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; <span class="built_in">timeTwo</span>(one, two) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个文件也不需要修改，我们只包含这个头文件而不需要定义任何宏变量，这样我们所包含的这个头文件中函数声明前使用的<code>DLL_API</code>的值就将是<code>_declspec(dllimport)</code>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="files-5"><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.22</span>)</span><br><span class="line"><span class="keyword">project</span>(LibraryTest)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_compile_options</span>(/source-charset:utf-<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_subdirectory</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/SimpleWork-Dynamic)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/main.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PUBLIC SimpleWork-Dynamic)</span><br></pre></td></tr></table></figure>
<p>这个文件同样不需要修改。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<p>以上测试文件将在 <a href="/posts/f8c82266">C/C++链接库生成与使用：Linux篇</a> 继续优化。</p>
]]></content>
      <categories>
        <category>C/C++</category>
        <category>链接库</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>链接库</tag>
        <tag>动态链接库</tag>
        <tag>静态链接库</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++链接库简介</title>
    <url>//posts/16812f7c/</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<h3 id="本文的组成">本文的组成</h3>
<p>本文的内容包含以下几个部分：</p>
<ul>
<li>一个典型 C/C++ 程序的编译过程</li>
<li>认识静态链接库</li>
<li>认识动态链接库</li>
<li>二者的联系与区别</li>
</ul>
<h3 id="系列文章">系列文章</h3>
<ul>
<li><a href="/posts/6e4f8e4a">C/C++ 链接库（准备工作）</a></li>
<li><strong>本文</strong>：<a href="#">C/C++ 链接库简介</a></li>
<li><a href="/posts/5aa06c69">C/C++ 链接库生成与使用：Windows 篇</a></li>
<li><a href="/posts/f8c82266">C/C++ 链接库生成与使用：Linux 篇</a></li>
</ul>
<h2 id="一、编译过程">一、编译过程</h2>
<p>当我们第一次使用 gcc 这个编译器的时候，一般执行的第一个命令就是：<code>gcc main.c</code>，它将我们的源文件 <code>main.c</code> “编译” 后生成了一个可执行文件：<code>a.out</code>（Windows下为<code>a.exe</code>）。于是，很多人可能就会有一个误解：编译就一个步骤，即编译本身。</p>
<p>但实际上整个编译过程并非只有一个步骤，而是由以下几个步骤组成：</p>
<p>假设我们有一个程序<code>main.c</code>如下所示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后执行以下命令：<code>gcc main.c</code>，然后 gcc 编译器就会执行下面的步骤：</p>
<div class="tabs" id="compile_process"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#compile_process-1">预处理</button></li><li class="tab"><button type="button" data-href="#compile_process-2">编译</button></li><li class="tab"><button type="button" data-href="#compile_process-3">汇编</button></li><li class="tab"><button type="button" data-href="#compile_process-4">链接</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="compile_process-1"><p>该过程将所有的<code>#define</code>、<code>#include</code>等进行替换。</p>
<blockquote>
<p><strong>库和头文件的区别</strong>：</p>
<p>相信很多刚开始学习计算机知识以及刚开始学习 C 语言或 C++ 的小伙伴一定对这两个名词很疑惑，理解起来很混乱。</p>
<p><strong>头文件</strong>大家都不陌生，能够通过<code>#include</code>包含的都算是头文件，但是我们在包含<code>&lt;stdio.h&gt;</code>这类标准库的时候，为什么要叫它标准库而不是标准头文件呢。</p>
<p>因为实际上标准库正如其名提供的是一个库文件，这个库文件里也包含着可执行代码，只不过库文件向外的接口往往都是以头文件的形式。其他代码必须要使用这个头文件提供的接口来调用标准库这个库文件中的可执行代码。</p>
</blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="compile_process-2"><p>将预处理之后的<code>main.c</code>进行编译过程，这个编译过程通常是根据当前的机器将源文件翻译成对应的汇编程序源文件，用后缀<code>.s</code>表示，即<code>main.c</code>被翻译为<code>main.s</code>，这个文件是汇编语言写成的程序。之所以要进行这一步，是因为在不同的机器上，相同指令的机器代码是不同的。我们使用的 C/C++ 语言则是高度抽象的语言，不因机器而异，但是我们最终得到的可执行程序却与机器相关，所以我们首先需要将其转换成与机器相关的文件。汇编语言是机器码的第一层抽象，也与机器相关，所以我们将 C 语言源文件先翻译成汇编语言源文件，然后再生成可执行文件</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="compile_process-3"><p>也就是将上一步我们得到的汇编语言源文件进行汇编得到一个后缀为<code>.o</code>的文件，即<code>main.o</code>，这类文件叫做<strong>可重定向目标文件</strong>，这个文件里面已经就是我们的机器将要执行的机器码了，是一个二进制文件，但为什么不是<code>a.out</code>或者说是<code>a.exe</code>文件呢？因为整个编译过程还有一个阶段没做</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="compile_process-4"><p>这一步对于 C/C++ 语言的初学者来说好像基本上遇不到，但实际上你编写的几乎每个程序都有这个过程，因为我们免不了使用标准库提供的函数。如果我们使用非标准库也就是第三方库，那么在 gcc 的命令中需要显式地链接这个库文件，这个库文件里就是我们之前包含的一个只有接口没有实现的头文件的实现部分。而只使用标准库的文件为什么在 gcc 命令中不需要显式地链接呢？其原因就是因为几乎每个程序都需要用到标准库提供的函数，而每一次使用 gcc 命令都要显式链接一下标准库实在太麻烦了，所以 gcc 都是隐式地链接了标准库，就不需要我们再动手链接了。在链接好之后我们就可以得到最终的可执行程序了，即<code>a.out</code>或<code>a.exe</code></p>
<p>前面我们说标准库提供的是一个库文件，其中包含着的是可执行代码。实际在链接这一步中，如果你使用了标准库中的函数例如<code>printf</code>、<code>scanf</code>等，编译器就会将标准库中的这两个函数对应的可执行代码链接到源文件生成的可重定向目标文件中对应函数调用的位置。</p>
<p>我们可以在终端执行下面的命令来看一下我们最终得到的可执行程序的依赖，也就是它需要链接的库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ldd a.out</span><br></pre></td></tr></table></figure>
<p>可以得到下面的输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sn@Program:~/桌面/Test$ ldd a.out </span><br><span class="line">	linux-vdso.so.1 (0x00007ffd0315f000)</span><br><span class="line">	libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fd4e1a41000)</span><br><span class="line">	/lib64/ld-linux-x86-64.so.2 (0x00007fd4e1c7d000)</span><br></pre></td></tr></table></figure>
<p><code>linux-vdso.so.1</code>和<code>/lib64/ld-linux-x86-64.so.2</code>在本文中不涉及，中间的<code>/lib/x86-64-linux-gnu/libc.so.6</code>这个文件也就是我们的标准库，里面的内容就是我们使用的标准库函数的实现部分。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="二、静态链接库">二、静态链接库</h2>
<h3 id="简介-2">简介</h3>
<p>刚刚我们说链接过程是将库文件中的代码链接到源文件编译出来的可重定向目标文件中使用到该库文件中函数的地方。而这个链接又有两种情况：</p>
<ul>
<li>其一是将这些库中的可执行代码复制到目标文件中对应位置，即静态链接</li>
<li>第二种是在目标文件对应位置标记上该函数在库文件中的地址，程序运行时会打开库文件查找并运行该地址处的内容，即动态链接</li>
</ul>
<p>我们可以明显看出，静态链接的优点就是程序运行简单，只需要一个可执行程序。但其缺点也很明显，大量库文件代码复制到可执行程序中，必然导致可执行程序的臃肿，其次是如果某个模块需要进行修改，最后还需要把整个项目编译一遍，极其浪费时间。</p>
<h3 id="生成过程">生成过程</h3>
<p>通常如果要编写一个静态链接库需要按照以下的步骤进行：</p>
<ol>
<li>编写接口头文件：我们首先需要思考这个库需要向外提供怎样的接口即功能，然后写成接口头文件</li>
<li>实现接口：在有了接口头文件之后，我们就需要去实现这些接口，实现的代码被封装，使用者无法看到</li>
<li>生成库文件：根据接口头文件和接口实现代码，我们就可以生成一个静态链接库文件了</li>
<li>提供静态链接库：开发者只需向使用者提供接口头文件和生成的静态链接库文件即可，可以看到接口的实现是非必要的，所以才说实现的代码是被封装的</li>
</ol>
<h3 id="使用过程">使用过程</h3>
<p>如果要使用一个静态链接库通常按照以下的步骤：</p>
<ol>
<li>包含接口头文件：在代码中包含接口头文件以使用其提供的接口</li>
<li>编译时指明静态库的名称和位置以进行链接</li>
<li>生成可执行程序</li>
<li>运行可执行程序</li>
</ol>
<h2 id="三、动态链接库">三、动态链接库</h2>
<h3 id="简介-3">简介</h3>
<p>动态链接库即上述中的另一种情况，在源文件编译出的可重定向目标文件对应位置标记所使用的库函数在库文件中的地址，然后在程序运行时打开库文件查找并运行该地址处的内容。</p>
<p>动态链接库的缺点和静态链接库的优点恰好相反：程序运行时同时需要可执行程序和库文件，可执行程序还必须能够查找到该库文件的位置</p>
<p>而其优点也很明显：最突出的就是其灵活性，如果一个模块出了问题，那么我们只需要重新编译该模块的代码而不需要再次编译整个项目；其次则是可执行程序的体积更小，可执行程序中重复的代码更少。</p>
<h3 id="生成过程-2">生成过程</h3>
<p>动态链接库的生成过程和静态链接库基本相同，但在生成库文件时稍有差别。</p>
<p>在 Windows 中生成一个动态链接库会 2 个库文件，一个和静态链接库后缀相同的文件，一个动态链接库文件。其中前者虽然和静态链接库后缀相同，但并非静态链接库，而是向目标文件与动态链接库文件联系起来的一个被称作导入库的文件。</p>
<p>在提供动态链接库的时候我们需要同时提供以上两个库文件以及一个接口头文件。</p>
<h3 id="使用过程-2">使用过程</h3>
<p>动态链接库的使用过程和静态链接库也基本相同，在生成可执行程序时及后续过程有所差别。</p>
<p>同样是在 Windows 系统下，向目标文件提供的需要链接的库文件应该是导入库的名称和地址而非动态链接库的地址（在 Linux 下还是提供动态链接库的地址）。</p>
<p>然后在运行可执行程序时，可执行程序和动态链接库必须同时存在，或者可执行程序能够知道动态链接库的位置（无论是 Windows 还是 Linux）</p>
<h2 id="四、二者的联系与区别">四、二者的联系与区别</h2>
<p><strong>联系</strong></p>
<ul>
<li>它们都是用来向用户提供一项功能的。通过库文件，我们可以方便地将一些常用的功能封装起来供其他人使用，例如除了标准库之外还有字符编码转换功能、绘图功能等等。用户无需自己实现，只需找到一个优秀的第三方库即可。</li>
<li>都需要提供一个接口头文件供用户导入</li>
</ul>
<p><strong>区别</strong></p>
<ul>
<li>它们在链接策略上有所区别</li>
<li>向目标文件导入二者的方式有所区别</li>
<li>向用户提供的文件有所区别</li>
<li>用户使用时的方式有所区别</li>
</ul>
]]></content>
      <categories>
        <category>C/C++</category>
        <category>链接库</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>链接库</tag>
        <tag>动态链接库</tag>
        <tag>静态链接库</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++链接库（准备工作）</title>
    <url>//posts/6e4f8e4a/</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p><strong>库</strong>可以说是实际项目中几乎必不可少的内容。在最开始学习编程语言的时候，可能多数人只会接触到可执行文件，那时我们编写的每一个源文件都可以直接编译成程序执行，在多文件编译时最多可能还会接触到<strong>可重定向目标文件</strong>，即后缀为<code>.o</code>的文件。但对库这个概念，或许心中只有一个模糊的概念。</p>
<p>大家其实都肯定了解一个 C/C++ 的程序从源文件开始的编译过程有 3 步：<strong>预处理</strong>、<strong>编译</strong>、<strong>链接</strong>。</p>
<p>其中链接这一步通常是最容易被我们忽略的，而这一步实际上就会用到我们的<strong>库文件</strong>。之所以会被忽略，是因为我们学习时所用到的库文件几乎只有标准库文件，而这个标准库文件几乎在所有编译器中都是默认链接的。</p>
<h3 id="本文的组成">本文的组成</h3>
<p>本篇主要是为后续文章做铺垫的准备工作部分，主要包括以下几个部分：</p>
<ul>
<li>工具和环境简介</li>
<li>CLion 添加环境的方法</li>
<li>CLion 使用不同环境运行程序的方法</li>
<li>CMake 简介</li>
</ul>
<h3 id="系列文章">系列文章</h3>
<ul>
<li><strong>本文</strong>：<a href="#">C/C++ 链接库（准备工作）</a></li>
<li><a href="/posts/16812f7c">C/C++ 链接库简介</a></li>
<li><a href="/posts/5aa06c69">C/C++ 链接库生成与使用：Windows 篇</a></li>
<li><a href="/posts/f8c82266">C/C++ 链接库生成与使用：Linux 篇</a></li>
</ul>
<h2 id="一、工具和环境">一、工具和环境</h2>
<p>实际上是后两篇文章会用到的工具和环境。</p>
<div class="tabs" id="toolsandenviroment"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#toolsandenviroment-1">工具</button></li><li class="tab"><button type="button" data-href="#toolsandenviroment-2">环境</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="toolsandenviroment-1"><p><strong>Windows</strong> + <strong>CLion</strong></p>
<blockquote>
<p>本文其实已经是第二个版本了，前一个版本实际使用的是 Visual Studio 作为开发工具，但有两个原因导致我更换了 IDE。</p>
<p>首先是 VS 的文件结构不太符合大部分实际开发场景，通常需要自行进行一些额外设置才能使用；</p>
<p>其次是在 VS 中为项目设置多环境测试不太方便。</p>
<p>与 VS 相比，CLion 的目录结构就比较灵活，并且可以为一个项目添加多个测试环境。当然，由于 CLion 项目是基于 CMake 的，所以仅仅使用 CMake 也能达到相同的效果，例如 VS Code + CMake 的组合，但实际开发我还是更倾向于使用 IDE。</p>
</blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="toolsandenviroment-2"><ol>
<li>
<p><strong>MSVC</strong></p>
<blockquote>
<p>我们不安装 VS，但仍然需要 VS 提供的开发环境，我们可以正常安装包含编辑器在内的 VS，也可以只安装 VS 的负载。</p>
<p>进入 <a href="https://visualstudio.microsoft.com/zh-hans/downloads/">https://visualstudio.microsoft.com/zh-hans/downloads/</a> 页面，然后我们不要直接选择页面中明显的那些下载按钮进行下载，首先下滑页面，打开<strong>用于 Visual Studio 的工具</strong>，选择其中的<strong>Visual Studio 2022 生成工具</strong>进行下载。</p>
<p><img src="01.png" alt="01"></p>
<p>安装好之后的过程就跟安装正常的 VS 一样了，选择<strong>使用 C++ 的桌面开发</strong>负载进行安装即可。</p>
<p><img src="02.png" alt="02"></p>
</blockquote>
</li>
<li>
<p><strong>WSL + CMake + GCC + GDB</strong></p>
<blockquote>
<ul>
<li>WSL 即 Windows 上的 Linux 子系统，不用使用其他虚拟机软件安装 Linux 系统。WSL 的优点主要是占用低，其环境便于 Windows 上的工具使用。其安装方式不在此处列出，读者可参考其他教程或等待我后续更新相关教程。</li>
<li>安装号 WSL 之后，再在其上安装好必备的 CMake、GCC（gcc、g++）、GDB 等工具。</li>
</ul>
</blockquote>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="二、CLion-添加环境方法">二、CLion 添加环境方法</h2>
<div class="tabs" id="methodstoaddenviromentinclion"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#methodstoaddenviromentinclion-1">MSVC</button></li><li class="tab"><button type="button" data-href="#methodstoaddenviromentinclion-2">WSL</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="methodstoaddenviromentinclion-1"><p>首先打开一个 CLion 项目，打开其工具链设置：</p>
<p><img src="03.png" alt="03"></p>
<p>需要注意的是工具链设置是一个全局设置，只需要设置一次，以后打开其他项目就是已经设置好的了。</p>
<p><img src="04.png" alt="04"></p>
<p>然后按照下图的顺序添加 Visual Studio 的环境（我已经添加好了)。</p>
<p><img src="05.png" alt="05"></p>
<p>最后在工具集部分定位到如下图所示的目录位置即可（未用红圈圈出的目录前缀是你的 VS 负载的安装位置)。在正确配置位置之后后续的工具就可以自动识别出来了。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="methodstoaddenviromentinclion-2"><p>我们按照与添加 MSVC 相同的方法添加另一个环境 WSL，然后在工具集部分选择自己要用来测试的 WSL 系统即可：</p>
<p><img src="06.png" alt="06"></p>
<p>如果在这个工具链页面中显示有什么工具没检测到的话，就进入你的 WSL 系统进行下载即可。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="三、CLion-使用不同环境编译运行项目方法">三、CLion 使用不同环境编译运行项目方法</h2>
<p>我们在完成上一步的工具链配置之后，需要选择一个工具链作为默认工具链，每次新建的项目就将使用该工具链对项目进行编译运行。</p>
<p>如果想要添加配置，则需要在每个项目中单独配置：</p>
<p>首先打开 CLion 设置中的 CMake 配置：</p>
<p><img src="07.png" alt="07"></p>
<p>在这项配置中需要添加配置文件，一个配置文件就是一个本项目的运行环境，你可以看到自带有一个配置文件，这是 CLion 自动创建的，这个配置文件使用的工具链是我设置的默认工具链，并不是上述所说的两者中的任意一个。</p>
<p>我们点击工具链的下拉框，选择我们需要的工具链即可，这里我选择 Visual Studio 工具链。</p>
<p><img src="08.png" alt="08"></p>
<p>然后，我们再按照下图所示的步骤向项目中添加一个工具链：</p>
<p><img src="09.png" alt="09"></p>
<p>其中第 3 步<strong>构建类型</strong>还是选择 Debug，然后工具链选择 WSL，最后使其类似于下图即可：</p>
<p><img src="10.png" alt="10"></p>
<p>最后点击确定就可以了。</p>
<p>如果我们需要切换测试环境，则点击下图所示的位置进行切换即可：</p>
<p><img src="11.png" alt="11"></p>
<h2 id="四、CMake-简介">四、CMake 简介</h2>
<p>CLion 项目的配置是基于 CMake 的，其核心在于根目录下的一个<code>CMakeLists.txt</code>文件：</p>
<p><img src="12.png" alt="12"></p>
<p>这是一个最基础的 CMake 配置文件，CLion 会调用我们刚配置好的工具链中选择的 CMake 工具来解析该文件并按照该文件的指示对项目进行相应处理，我们详细解释一下这四条配置：</p>
<ul>
<li><code>cmake_minimum_required(VERSION 3.22)</code>：这一条规定了用来解析该文件的 CMake 工具的最低版本，如果你的工具链中 CMake 版本低于此处声明的版本号，则会解析失败，你要么更新工具链中的 CMake 工具，要么降低此处声明的版本号</li>
<li><code>project(LibraryTest)</code>：本句声明了本项目的名称</li>
<li><code>set(CMAKE_CXX_STANDARD 11)</code>：这是一条设定语句，设定了本项目的 C++ 标准应该是 C++11 标准</li>
<li><code>add_executable(LibraryTest main.cpp)</code>：这条语句的意思是生成一个可执行程序（<code>add_executable</code>），其中需要至少两个参数，其一是该可执行程序的名称，第二项是参与编译该可执行程序的文件名。</li>
</ul>
<p>这就是最基本的 CMake 配置文件的写法，后续如果遇到新的语句，将在该处单独进行解释。</p>
<p>如果对 CMake 感兴趣，请前往其官网了解：<a href="https://cmake.org/">CMake - Upgrade Your Software Build System</a></p>
]]></content>
      <categories>
        <category>C/C++</category>
        <category>链接库</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>链接库</tag>
        <tag>动态链接库</tag>
        <tag>静态链接库</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows环境编程乱码问题解决方案总结</title>
    <url>//posts/a15e7e9/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>本文主要是在 Windows 环境下编程所出现的乱码问题的解决方案的总结，其中也包括了前篇所说的调控编译器选项的乱码解决方案，同时还补充了其他的一些可行的方法。</p>
<p>另外，虽然本文又一次提到了调控编译器选项的相关内容，但本文并不是前篇内容的复制粘贴，也不会进行各种各样的测试，本文只想聊聊在实际开发过程中应该如何使用这样的方法，以及如何将其推广到不止一种字符集环境中。</p>
<h3 id="系列文章">系列文章</h3>
<ul>
<li><a href="/posts/c77f42f7">编程中乱码出现的原因</a></li>
<li><a href="/posts/5e27120d">通过调控编译器选项的乱码解决方案测试</a></li>
<li><strong>本文</strong>：<a href="#">Windows 环境编程乱码问题解决方案总结</a></li>
</ul>
<h2 id="一、调控编译器选项法">一、调控编译器选项法</h2>
<h3 id="1-重复命令">1. 重复命令</h3>
<p>在我上一篇的测试中，每一组测试我都是重新写命令然后执行。</p>
<p>毫无疑问，这样不仅容易出错，而且效率还低，如果是在一个大项目里，这种方法是绝不可行的。</p>
<p>我们理所当然应该想到使用 Makefile 对程序进行编译。</p>
<h3 id="2-Makefile">2. Makefile</h3>
<p>使用 Makefile 能有效地提高每一次编译的效率，也能降低命令出错的概率。</p>
<p>但还有一个弊端，我们仍然没有跳脱出来，那就是我们编写的命令毫无疑问只能在一种特定字符集的机器上运行，打个比方说如果在日本的 Windows 上编译此程序，那么 MSVC 所编译出的程序应该还是可行，但如果是使用 GCC 编译得到的程序就应该会出现错误了。因为 MSVC 能够自动识别用户字符集并且其<code>/execution-charset</code>选项默认就是用户字符集，而源文件只要保持<code>utf-8</code>不变，再将 MSVC 的<code>/source-charset</code>选项设定为<code>utf-8</code>，那么就基本上能够在任何环境的 Windows 下编译出正确运行的程序。而 GCC 则因为<code>-fexec-charset</code>默认为<code>utf-8</code>所以无法做到适应每一种用户字符集。</p>
<p>另外，对于纯手写 Makefile 的方法，在项目中也通常不是最常用的方法，人们会借助 Configure 工具来自动生成 Makefile，以达到检查编译工具是否齐全以及根据环境生成最适合该环境的 Makefile 的功能。</p>
<h3 id="3-自动生成">3. 自动生成</h3>
<p>如果你喜欢使用 CLion IDE 作为日常的开发工具，那你一定对 CMake 不陌生，实际上 CMake 和 Configure 工具是同一层级的编译工具，通过更高层次的抽象，只需要在配置文件中描述一下项目的相关内容，就能自动根据这个配置文件生成具体的 Makefile 文件。</p>
<p>由于上面所说的 MSVC 在编译此类程序时几乎没有问题，所以后续我们都以 GCC 为例。</p>
<p>通过使用这种构建工具，我们或许能通过它来识别具体的用户字符集，然后来生成最适合本地环境的 Makefile 文件，最终生成可以正确运行的程序。</p>
<p>例如，如果我们使用 CMake 进行构建，可以在 CMakeLists.txt 文件中添加这样一段进行简单的配置：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(WIN32)</span><br><span class="line">    <span class="keyword">if</span>(MSVC)</span><br><span class="line">        <span class="keyword">add_compile_options</span>(/source-charset:utf-<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">elseif</span>(CMAKE_COMPILER_IS_GNUCXX)</span><br><span class="line">        <span class="keyword">execute_process</span>(<span class="keyword">COMMAND</span> PowerShell <span class="string">&quot;[System.Text.Encoding]::Default.BodyName&quot;</span> OUTPUT_VARIABLE USER_CHARSET OUTPUT_STRIP_TRAILING_WHITESPACE)</span><br><span class="line">        <span class="keyword">add_compile_options</span>(-fexec-charset=<span class="variable">$&#123;USER_CHARSET&#125;</span>)</span><br><span class="line">    <span class="keyword">endif</span> ()</span><br><span class="line"><span class="keyword">endif</span> ()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在这个例子中，只对 Windows 下的环境进行了判断，主要是由于 Linux 或其他环境下默认用户字符集都是<code>utf-8</code>，并且使用的基本上也是 GCC 或者和 GCC 类似的编译器，所以一般来说只需要特殊化 Windows 环境下的编译命令。我们用一个条件<code>WIN32</code>来区分 Windows 和其他环境</p>
<p>紧接着，根据一个条件分支，当编译器使用 MSVC 时，直接将编译器的输入文件编码的配置选项设置为<code>utf-8</code>即可实现所有 Windows 环境的编译工作（因为我们的文件字符集被规定为<code>utf-8</code>）。</p>
<p>然后在另一个分支中，当编译器使用 GCC 系列时，我们先是调用 PowerShell 并运行引号中的命令获取当前用户字符集，并将该结果的文本内容写到变量<code>USER_CHARSET</code>中，然后再添加编译器选项<code>-fexec-charset=$&#123;USER_CHARSET&#125;</code>，这个地方的<code>$&#123;USER_CHARSET&#125;</code>会自动替换为刚刚运行命令获取的用户字符集的内容</p>
</blockquote>
<p>当然，你可以再精细化一下上面的配置，使它可以灵活处理任何编译环境，具体方法请参考 <a href="https://cmake.org/cmake/help/latest/">CMake官方文档</a>。</p>
<p>使用本方法可以做到不费太大工夫就解决程序乱码问题，比起修改用户环境这些方法好很多。但同样有缺陷，就是如果我们做的是一个全球化的软件，那可能需要为每一个地区都发布一个安装包，具体的解决方法可以参考下面一节内容。</p>
<p>总的来说，如果你更倾向于让用户直接下载源文件并自行编译，那么这种方法毫无疑问是非常合适的，如果配置合理是肯定不会出现乱码问题的，唯一的问题可能是用户的字符集里没有收纳你的程序需要打印出来的字符，所以通常需要为每一个地区提供一个语言包。</p>
<p>如果你更倾向于直接发布安装包让用户下载，那最好的办法还是使用下一节所讲的内容，否则你需要为每一种用户环境都编译一次。</p>
<h2 id="二、程序内转换编码法">二、程序内转换编码法</h2>
<h3 id="1-上述方案弊端分析">1. 上述方案弊端分析</h3>
<p><strong>弊端一</strong>：不难发现，每到一个新机器上，程序都需要重新进行编译，当然不排除有一部分人就喜欢自行编译，但应该认识到大部分人需要的都是下载完成后能够直接安装使用的方案，而非先安装编译环境然后再编译源文件，最后才是安装使用的方案。</p>
<p><strong>弊端二</strong>：在前面的程序中，不论是字符串字面值还是输入的字符串，我们都没有经过任何处理就直接输出了。但是更符合一般情形的却是无论是字符串字面值还是输入到程序中的字符串我们都会进行处理，而这就又将导致一个问题。如果只处理英文，那么通常单字节的<code>char</code>类型就足够了，但如果还涉及到正确处理中文字符的话，或许需要用到<code>utf-16</code>或<code>utf-32</code>，而源文件本身应该还是保持<code>utf-8</code>，同时还不改终端<code>gbk</code>或其他字符集，这个问题就再一次变得复杂了。</p>
<h3 id="2-弊端二的解决">2. 弊端二的解决</h3>
<p>我们先来解决弊端二的问题。</p>
<p>将源文件的字符集设置为<code>utf-8</code>，终端保持<code>gbk</code>，然后在程序内处理<code>utf-16</code>字符集的字符串。为此我们应该需要三个转换函数：</p>
<ol>
<li>用于将字符串字面值编码转换为可处理编码，即<code>u8_u16</code></li>
<li>用于将输入字符串编码转换为可处理编码的<code>gbk_u16</code></li>
<li>用于将标准处理字符串编码输出的<code>u16_gbk</code>。</li>
</ol>
<p>另外，我们还需要明确一个问题，即此时编译器是否还影响乱码问题的出现。推测应该还是有影响，保险起见进行两组测试，一是将编译器的<strong>设定1</strong>（<code>/source-charset</code>或<code>-finput-charset</code>）和<strong>设定2</strong>（<code>/execution-charset</code>或<code>-fexec-charset</code>）统一的测试组，即中间不会进行任何编码的转换；二是将<strong>设定1</strong>和<strong>设定2</strong>设置为不同字符集，源文件中的字符串字面值编码应该会在编译器中发生一次转换。</p>
<p><strong>测试代码</strong>如下：</p>
<div class="tabs" id="code"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#code-1">convert.h</button></li><li class="tab"><button type="button" data-href="#code-2">test.cpp</button></li><li class="tab"><button type="button" data-href="#code-3">convert.cpp</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="code-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::u16string <span class="title">u8_u16</span><span class="params">(<span class="type">const</span> std::string&amp; str_u8)</span></span>;</span><br><span class="line"><span class="function">std::u16string <span class="title">gbk_u16</span><span class="params">(<span class="type">const</span> std::string&amp; str_gbk)</span></span>;</span><br><span class="line"><span class="function">std::string <span class="title">u16_gbk</span><span class="params">(<span class="type">const</span> std::u16string&amp; str_u16)</span></span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="code-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;convert.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="keyword">using</span> std::u16string;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义字符串并获取输入</span></span><br><span class="line">    <span class="function">string <span class="title">out_u8</span><span class="params">(<span class="string">&quot;你刚刚输入的是：&quot;</span>)</span></span>;</span><br><span class="line">    string in_gbk;</span><br><span class="line">    std::cin &gt;&gt; in_gbk;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将以上字符串转换为用于处理的编码</span></span><br><span class="line">    u16string out_16 = <span class="built_in">u8_u16</span>(out_u8);</span><br><span class="line">    out_16 += <span class="built_in">gbk_u16</span>(in_gbk);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将输出字符串转换为 gbk</span></span><br><span class="line">    string out_gbk = <span class="built_in">u16_gbk</span>(out_16);</span><br><span class="line">    <span class="comment">// 对 utf-16 的字符串进行处理（返回其字符串长度）</span></span><br><span class="line">    std::cout &lt;&lt; out_16.<span class="built_in">length</span>() &lt;&lt; std::endl;</span><br><span class="line">    <span class="comment">// 输出 gbk 字符串</span></span><br><span class="line">    std::cout &lt;&lt; out_gbk &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="code-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;convert.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::u16string <span class="title">u8_u16</span><span class="params">(<span class="type">const</span> std::string &amp;str_u8)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::u16string u16str;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; str_u8.<span class="built_in">length</span>()) &#123;</span><br><span class="line">        <span class="comment">// Read the first byte</span></span><br><span class="line">        <span class="type">char</span> u8char = str_u8[i++];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((u8char &amp; <span class="number">0x80</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Single-byte UTF-8 character</span></span><br><span class="line">            u16str.<span class="built_in">push_back</span>(u8char);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((u8char &amp; <span class="number">0xE0</span>) == <span class="number">0xC0</span>) &#123;</span><br><span class="line">            <span class="comment">// Two-byte UTF-8 character</span></span><br><span class="line">            <span class="type">char</span> char2 = str_u8[i++];</span><br><span class="line">            <span class="type">char16_t</span> u16char = ((u8char &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">6</span>) | (char2 &amp; <span class="number">0x3F</span>);</span><br><span class="line">            u16str.<span class="built_in">push_back</span>(u16char);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((u8char &amp; <span class="number">0xF0</span>) == <span class="number">0xE0</span>) &#123;</span><br><span class="line">            <span class="comment">// Three-byte UTF-8 character</span></span><br><span class="line">            <span class="type">char</span> char2 = str_u8[i++];</span><br><span class="line">            <span class="type">char</span> char3 = str_u8[i++];</span><br><span class="line">            <span class="type">char16_t</span> u16char = ((u8char &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">12</span>) | ((char2 &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">6</span>) | (char3 &amp; <span class="number">0x3F</span>);</span><br><span class="line">            u16str.<span class="built_in">push_back</span>(u16char);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Invalid UTF-8 sequence</span></span><br><span class="line">            <span class="comment">// Handle the error as needed</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> u16str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">std::u16string <span class="title">gbk_u16</span><span class="params">(<span class="type">const</span> std::string &amp;str_gbk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> utf16_length = <span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, str_gbk.<span class="built_in">c_str</span>(), <span class="number">-1</span>, <span class="literal">nullptr</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (utf16_length == <span class="number">0</span>) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;MultiByteToWideChar failed&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">u16string</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">wchar_t</span>&gt; <span class="title">utf16_buffer</span><span class="params">(utf16_length)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">MultiByteToWideChar</span>(CP_ACP, <span class="number">0</span>, str_gbk.<span class="built_in">c_str</span>(), <span class="number">-1</span>, utf16_buffer.<span class="built_in">data</span>(), utf16_length) == <span class="number">0</span>) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;MultiByteToWideChar failed&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">u16string</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::u16string utf16_string;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; utf16_length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        utf16_string.<span class="built_in">push_back</span>(utf16_buffer[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> utf16_string;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">std::string <span class="title">u16_gbk</span><span class="params">(<span class="type">const</span> std::u16string &amp;str_u16)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> gbk_length = <span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, <span class="built_in">reinterpret_cast</span>&lt;LPCWCH&gt;(str_u16.<span class="built_in">c_str</span>()), str_u16.<span class="built_in">length</span>(), <span class="literal">nullptr</span>, <span class="number">0</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (gbk_length == <span class="number">0</span>) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;WideCharToMultiByte failed&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">string</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">char</span>&gt; <span class="title">gbk_buffer</span><span class="params">(gbk_length)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">WideCharToMultiByte</span>(CP_ACP, <span class="number">0</span>, <span class="built_in">reinterpret_cast</span>&lt;LPCWCH&gt;(str_u16.<span class="built_in">c_str</span>()), str_u16.<span class="built_in">length</span>(), gbk_buffer.<span class="built_in">data</span>(), gbk_length, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;WideCharToMultiByte failed&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">string</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">string</span>(gbk_buffer.<span class="built_in">begin</span>(), gbk_buffer.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<p><strong>正确结果示例</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./test.exe </span><br><span class="line">你好啊</span><br><span class="line">11</span><br><span class="line">你刚刚输入的是：你好啊</span><br></pre></td></tr></table></figure>
<p>可以看到在输出字符串长度时由于我们转换了编码，所以能够正确处理中文字符了。</p>
<p><strong>测试结果</strong>：</p>
<ol>
<li>
<p>编译器<strong>设定1</strong>和<strong>设定2</strong>统一时：</p>
<ol>
<li>
<p>将源文件字符集固定为<code>utf-8</code>，使用 MSVC 和 GCC 在全缺省的情况下都能正常编译，且结果正确；</p>
</li>
<li>
<p>如果将源文件字符集固定为<code>gbk</code>，则在输出时原本的字符串字面值以及输出字符串长度会输出错误，输入反馈仍然正常；</p>
<blockquote>
<p>原因应该是字符串字面值在文件中保存为了<code>gbk</code>编码，然后又执行了<code>u8_u16</code>的转换，故出错</p>
</blockquote>
</li>
<li>
<p>当源文件字符集固定为<code>gbk</code>，并且在字符串字面值前添加<code>u8</code>前缀后，输出正确。</p>
<blockquote>
<p>说明上一点的原因推测正确</p>
</blockquote>
</li>
</ol>
</li>
<li>
<p>编译器<strong>设定1</strong>和<strong>设定2</strong>不统一时：</p>
<ol>
<li>
<p>当源文件设定为<code>gbk</code>，然后 MSVC 的设定1保持默认<code>gbk</code>，设定2设置为<code>utf-8</code>，输出结果正确。GCC 获得相同结果</p>
</li>
<li>
<p>当源文件设定为<code>utf-8</code>，然后 MSVC 设定1 设置为<code>utf-8</code>，设定2保持默认<code>gbk</code>，输出结果错误。GCC 获得相同结果</p>
<blockquote>
<p>根据以上两次测试，可以合理猜测程序处理过程中使用的数据是经过编译器转换后的编码</p>
</blockquote>
</li>
</ol>
</li>
</ol>
<p><strong>结论</strong>：当我们的源文件固定为<code>utf-8</code>时，且终端字符集固定为<code>gbk</code>时，使用该方法则无需调控编译器的相关选项，只需要保证编译器的设定1和设定2一致即可。与此同时，我们还可以在程序中对中文字符串进行正确的处理，故此方案可行。</p>
<h3 id="3-弊端一的解决">3. 弊端一的解决</h3>
<p>解决了弊端二，同时也带来了一个新的问题：我们无法再通过 Configure 或 CMake 来自动根据环境修改编译命令，而将编码处理放在了程序中，而上面的程序只解决了在<code>gbk</code>终端环境下的问题，如果要让程序能够自动处理多种环境的转换，则可能需要实现大量字符串编码转换函数，以及使用宏来调控。</p>
<p>如果解决了这个问题，那么弊端一也就解决了，而这个问题说到底就是编程问题，需要自己去添加转换函数并添加识别当前环境的代码并据此调控转换时使用的具体的函数。</p>
<p>而这个功能最好分离出来，形成一个可复用的功能。我也计划写一个第三方库来实现这样的功能，当然，编码转换实际上已经第三方库实现过了，所以实际上我想写的一个第三方库目标是一个使用更方便，更智能，转换追求无感化的一个第三方库。如果该项目具有可行性，则会在项目建立之后将链接贴在此处。</p>
<h2 id="三、修改用户环境法（极其不推荐）">三、修改用户环境法（极其不推荐）</h2>
<p>在标题中我写上了 “极其不推荐”，但还是放在了这篇文章当中，不是为了让大家觉得这种方法还是有一定的可行性，而是因为我第一次探索乱码问题时就走入了这样的一个误区，然后还花时间做了测试和总结，然而后来才发现这个方向几乎完全错误，最后我把那篇文章删掉了，但还是有点气不过写那篇文章所花费的大量的时间，所以在这添加了这样一节做一个纪念，呜呜呜。</p>
<p>修改用户环境有两种手段，一是让用户自行去修改，这种方案即使在那篇错误的文章中也是一个废案，因为一个程序应该做的绝不应该是要求用户先去修改日常使用的环境；第二种手段就是在程序中插入代码来修改用户环境，包括使用<code>system</code>函数调用系统命令的方法以及使用 Win32 API 和 C/C++ 标准库进行本地化的方法。</p>
<p>经过以前的测试，即使使用第二种方法修改用户环境也是完全不好的方案，如果你有兴趣去进行实验，那你会发现即使对于字符串字面值的输出能够正确显示，其对于输入的反馈也大概率会出错。</p>
<p>故不推荐。</p>
<h2 id="四、总结">四、总结</h2>
<p>本文虽然一共写了三种方案，但实际可行的只有前两种，在这两种方案之中，第二种方案即在程序内转换编码的方案应该是最好的，因为我们几乎不可能不对字符串内容进行处理，而为了处理中文字符串，就几乎必然得用到 Unicode 字符集，也就是说几乎必然需要编码转换。在这样的情况下，显然使用第二种方案是最好的方案。</p>
]]></content>
      <categories>
        <category>Windows</category>
        <category>问题探索</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>编码问题</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>通过调控编译器选项的乱码解决方案测试</title>
    <url>//posts/5e27120d/</url>
    <content><![CDATA[<h2 id="系列文章">系列文章</h2>
<ul>
<li><a href="/posts/c77f42f7">编程中乱码出现的原因</a></li>
<li><strong>本文</strong>：<a href="#">通过调控编译器选项的乱码解决方案测试</a></li>
<li><a href="/posts/a15e7e9">Windows 环境编程乱码问题解决方案总结</a></li>
</ul>
<h2 id="一、输出测试">一、输出测试</h2>
<h3 id="1-测试代码">1. 测试代码</h3>
<p>使用了一个非常简单的代码进行测试：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;你好，C++！&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-测试前分析">2. 测试前分析</h3>
<p>开始测试前我们不妨先分析一下，根据上一篇文章：【<a href="https://blog.syunn.cn/posts/c77f42f7/">编程中乱码出现的原因</a>】 所提到的关于导致乱码的两个决定性因素不难得出，我们只需要将编译器的<strong>设定1</strong>（输入源文件所使用字符集的设定项）固定为<code>utf-8</code>（因为在上一篇文章中将源文件假设固定为了<code>utf-8</code>字符集），将编译器的<strong>设定2</strong>（输出窄字符串的转换目标字符集的设定项）固定为<code>gbk</code>（在上一篇文章中假设固定为了<code>gbk</code>字符集）即可。</p>
<p>由于 MSVC 的设定1默认不识别<code>utf-8</code>，而 GCC 的设定2默认为<code>utf-8</code>，所以很显然，如果我们使用 MSVC 进行编译，则需要显式设置设定1，而如果使用 GCC 进行编译，则需要显示设置设定2，所以实际上只需要做两组测试即可。</p>
<p>但为了证明上一篇文章中所述理论的可靠性，还需要添加一些测试组，所有测试将分为以下几个部分：</p>
<div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">MSVC部分</button></li><li class="tab"><button type="button" data-href="#test-2">GCC部分</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><ol>
<li>可靠性测试：又分为以下两个部分
<ol>
<li>预测正确测试组：编译器在缺省状态下对<code>utf-16(LE)</code>、<code>utf-8(BOM)</code>以及<code>gbk</code>字符集的源文件进行编译测试（一共 3 组测试）</li>
<li>预测出错测试组：编译器在缺省状态下对<code>utf-8(No BOM)</code>字符集的源文件进行编译测试（一共 1 组测试）</li>
</ol>
</li>
<li>正确性测试：也分为两个部分
<ol>
<li>预测正确测试组：将<strong>设定1</strong>设置为<code>utf-8</code>对<code>utf-8(No BOM)</code>字符集的源文件进行编译测试（一共 1 组测试）</li>
<li>预测错误对照组：将<strong>设定2</strong>设置为<code>utf-8</code>对<code>utf-16(LE)</code>、<code>utf-8(BOM)</code>、<code>utf-8(No BOM)</code>以及<code>gbk</code>字符集的源文件进行编译测试（一共 4 组测试）</li>
</ol>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol>
<li>可靠性测试：此部分无预测正确测试组，只包含预测错误测试组。分别是在缺省状态下对<code>utf-16(LE)</code>、<code>utf-8(BOM)</code>、<code>utf-8(No BOM)</code>以及<code>gbk</code>字符集的源文件进行编译测试（一共 4 组测试）</li>
<li>正确性测试：此部分分为如下两个部分
<ol>
<li>预测正确测试组：将<strong>设定2</strong>固定为<code>gbk</code>，然后将<strong>设定1</strong>依次设置为<code>utf-16</code>、<code>gbk</code>并对对应字符集的源文件进行编译测试，另外在缺省状态下对<code>utf-8(No BOM)</code>和<code>utf-8(BOM)</code>字符集的源文件进行编译测试（一共 4 组测试）</li>
<li>预测错误对照组：将<strong>设定2</strong>固定为<code>gbk</code>，<strong>设定1</strong>保持缺省状态对<code>utf-16</code>和<code>gbk</code>字符集的源文件进行编译测试。（一共 2 组测试）</li>
</ol>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h3 id="3-测试及测试结果">3. 测试及测试结果</h3>
<p>以上测试均以表格形式给出：</p>
<div class="tabs" id="result"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#result-1">MSVC部分</button></li><li class="tab"><button type="button" data-href="#result-2">GCC部分</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="result-1"><ol>
<li>
<p>可靠性测试</p>
<ol>
<li>
<p>预测正确测试组</p>
<table>
<thead>
<tr>
<th>设定项/组别</th>
<th>第一组（<code>utf-16(LE)</code>）</th>
<th>第二组（<code>utf-8(BOM)</code>）</th>
<th>第三组（<code>gbk</code>）</th>
</tr>
</thead>
<tbody>
<tr>
<td>全缺省状态</td>
<td>正确输出</td>
<td>正确输出</td>
<td>正确输出</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>预测出错测试组</p>
<table>
<thead>
<tr>
<th>设定项/组别</th>
<th>第一组（<code>utf-8(No BOM)</code>）</th>
</tr>
</thead>
<tbody>
<tr>
<td>全缺省状态</td>
<td>出现乱码<code>浣犲ソ锛孋++!</code></td>
</tr>
</tbody>
</table>
</li>
</ol>
</li>
<li>
<p>正确性测试</p>
<ol>
<li>
<p>预测正确测试组</p>
<table>
<thead>
<tr>
<th>设定项/组别</th>
<th>第一组（<code>utf-8(No BOM)</code>）</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>设定1</strong>：<code>utf-8</code></td>
<td>正确输出</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>预测错误对照组</p>
<table>
<thead>
<tr>
<th>设定项/组别</th>
<th>第一组（<code>utf-16(LE)</code>）</th>
<th>第二组（<code>utf-8(BOM)</code>）</th>
<th>第三组（<code>utf-8(No BOM)</code>）</th>
<th>第四组（<code>gbk</code>）</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>设定2</strong>：<code>utf-8</code></td>
<td>出现乱码<code>浣犲ソ锛孋++!</code></td>
<td>出现乱码<code>浣犲ソ锛孋++!</code></td>
<td>出现乱码<code>娴ｇ姴銈介敍瀛?+!</code></td>
<td>出现乱码<code>浣犲ソ锛孋++!</code></td>
</tr>
</tbody>
</table>
</li>
</ol>
</li>
</ol>
<p><strong>分析</strong>：所有测试组都得到了预想的结果，比较不同的是正确性测试中的预测错误对照组中的第三组中出现的乱码和其他组别不相同，其原因应该是其他三组都正确识别了源文件中的内容，但在输出时与终端字符集不匹配，而第三组则是在识别源文件内容时就出现了错误，然后在输出时又因为一次不匹配导致了该乱码。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="result-2"><ol>
<li>
<p>可靠性测试</p>
<table>
<thead>
<tr>
<th>设定项/组别</th>
<th>第一组（<code>utf-16(LE)</code>）</th>
<th>第二组（<code>utf-8(BOM)</code>）</th>
<th>第三组（<code>utf-8(No BOM)</code>）</th>
<th>第四组（<code>gbk</code>）</th>
</tr>
</thead>
<tbody>
<tr>
<td>全缺省状态</td>
<td>出现编译错误</td>
<td>出现乱码<code>浣犲ソ锛孋++!</code></td>
<td>出现乱码<code>浣犲ソ锛孋++!</code></td>
<td><strong>正确输出</strong></td>
</tr>
</tbody>
</table>
</li>
<li>
<p>正确性测试</p>
<ol>
<li>
<p>预测正确测试组</p>
<table>
<thead>
<tr>
<th>设定项/组别</th>
<th>第一组（<code>utf-16(LE)</code>）</th>
<th>第二组（<code>utf-8(BOM)</code>）</th>
<th>第三组（<code>utf-8(No BOM)</code>）</th>
<th>第四组（<code>gbk</code>）</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>设定1</strong>：<code>utf-16</code><br /><strong>设定2</strong>：<code>gbk</code></td>
<td>出现编译错误（和可靠性测试中的编译错误不同）</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>设定1</strong>：<code>gbk</code><br /><strong>设定2</strong>：<code>gbk</code></td>
<td></td>
<td></td>
<td></td>
<td>正确输出</td>
</tr>
<tr>
<td><strong>设定2</strong>：<code>gbk</code></td>
<td></td>
<td>正确输出</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>设定2</strong>：<code>gbk</code></td>
<td></td>
<td></td>
<td>正确输出</td>
<td></td>
</tr>
</tbody>
</table>
</li>
<li>
<p>预测错误对照组</p>
<table>
<thead>
<tr>
<th>设定项/组别</th>
<th>第一组（<code>utf-16(LE)</code>）</th>
<th>第二组（<code>gbk</code>）</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>设定2</strong>：<code>gbk</code></td>
<td>出现编译错误（和可靠性测试中的编译错误相同）</td>
<td>出现编译错误（输出字符串被识别为非法序列）</td>
</tr>
</tbody>
</table>
</li>
</ol>
</li>
</ol>
<p><strong>分析</strong>：相比于 MSVC 的测试结果，GCC 的测试结果有了更多可以说道的地方</p>
<ol>
<li>首先是在可靠性测试的预测错误测试中，最后一组在缺省状态下对<code>gbk</code>字符集的源文件进行编译测试得到了正确的输出，其原因应该是在读取阶段用<code>utf-8</code>解释了<code>gbk</code>字符串编码，但由于 GCC 本身的<strong>设定1</strong>和<strong>设定2</strong>在缺省状态下是相同的，所以即便字符串编码被错误解释了，但是却并未进行任何转换，所以最后在输出到<code>gbk</code>字符集的终端时得到了正确的结果</li>
<li>整个测试中在对<code>utf-16(LE)</code>字符集的源文件进行测试时都得到了编译错误，其中第一次和第三次错误相同，第二次出现了不同的错误。根据这几组测试中的设定项可以知道第一次和第三次都是用<code>utf-8</code>去解释了<code>utf-16(LE)</code>字符集的源文件，而第二次虽然使用<code>utf-16</code>去解释了<code>utf-16(LE)</code>字符集的源文件，但仍然得到了编译错误，这可能是因为设定项并未设置正确，因为<code>utf-16</code>一共有 4 种情况，分别是大端和小端以及是否带 BOM。但在 GCC 的选项中我只找到了<code>utf-16</code>这一个值，同时我用来测试的是 vscode，其中对于<code>utf-16</code>只进行了大端小端的区分。</li>
<li>最后一个错误是最后一个测试组中的第二组，即用<code>utf-8</code>识别<code>gbk</code>字符集的源文件，出现了编译错误。但虽然说是编译错误，但具体问题仍然出现在字符串的识别上。在 MSVC 的测试组中并没有用<code>utf-8</code>识别<code>gbk</code>文件的测试组，所以我再次用 MSVC 进行了该项测试，结果与 GCC 出现相同错误，故此处的编译错误属于正常现象。</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="二、输入反馈测试">二、输入反馈测试</h2>
<h3 id="1-测试代码-2">1. 测试代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">20</span>];</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;你的输入是：&quot;</span> &lt;&lt; str &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-测试结果及分析">2. 测试结果及分析</h3>
<p>对于输入反馈的测试，此处不再详细描述测试环节。</p>
<p><strong>测试结果</strong>：</p>
<p>实际上，除了上述测试中出现编译错误的测试组外，其余测试无论输出是否正确，几乎都有正确的输入反馈。</p>
<p>唯一出现的一个乱码错误是在使用<code>gbk</code>解释<code>utf-8</code>字符集的源文件并将字符串字面值按照<code>utf-8</code>字符集下的编码输出到<code>gbk</code>环境的终端上的测试组。另外，此错误只出现在了 MSVC 的测试中，在 GCC 中无法复现此错误，而是直接返回一个编译错误：<code>error: failure to convert gbk to UTF-8</code></p>
<p><strong>分析</strong>：</p>
<p>由于几乎每一组都没有出现错误，所以我推测输入的字符串与编译器的设定项没有关系，并且如果在程序中没有对输入的字符串进行任何处理而直接输出的话，其编码也不会进行任何变化（理所当然）。</p>
<p>在输入阶段，字符串就已经通过终端转换为了<code>gbk</code>字符集下的编码，然后在程序中转了一圈此编码又输出到了终端，所以不会出现错误。</p>
<p>而仅出现的那一个错误后续又设置了两组测试，一是将字符串字面值全删了，仅进行输入反馈，二是在原本的字符串字面值末尾添加了几个英文字符。在第一组测试中输入得到了正确的反馈，而在第二组测试中，英文字符部分的前几个字符未能成功显示，而后续字符以及输入反馈都得到了正确的显示。推测是在整个字符串从识别到输出的过程中中文字符串的末尾编码与后续字符串的前部分编码产生了合并，总之也属于乱码的一种，但输入反馈仍然满足上述的推测。</p>
<h2 id="三、总结">三、总结</h2>
<p>根据上述测试，我们已经可以下定论了，只要我们将编译器的设定1与源文件字符集匹配，将设定2与终端字符集匹配，则可以做到最低程度上的不乱码。</p>
<p>而至于要处理输入字符串或者字符串字面值的情况，则暂时不进行讨论，可能在后续的文章中进行探索。</p>
]]></content>
      <categories>
        <category>Windows</category>
        <category>问题探索</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>编码问题</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>编程中乱码出现的原因</title>
    <url>//posts/c77f42f7/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>本文将探索在编程过程中出现乱码问题的具体原因。之所以加了个前缀 “编程过程中” 是因为我并非是要说明乱码本身出现的原因即编码与解码阶段使用的编码不一致，这个原因很好理解并且也已经有很多人讲过了。</p>
<p>本文所探讨的是在编程过程中由于各种中间环节的影响，即使你清楚乱码产生的原因，也仍然可能无法避免地产生乱码的问题。</p>
<p>另外，由于在 Linux 环境下几乎不会遇到这样的问题（如果我们统一使用<code>utf-8</code>的文件格式与<code>utf-8</code>的用户字符集并且使用 GNU GCC 作为编译器的话），所以本文的全部内容都将基于 Windows 环境下的乱码问题进行介绍，中文环境将以<code>gbk</code>为准。</p>
<h3 id="系列文章">系列文章</h3>
<ul>
<li><strong>本文</strong>：<a href="#">编程中乱码出现的原因</a></li>
<li><a href="/posts/5e27120d">通过调控编译器选项的乱码解决方案测试</a></li>
<li><a href="/posts/a15e7e9">Windows 环境编程乱码问题解决方案总结</a></li>
</ul>
<h2 id="一、三大影响因素">一、三大影响因素</h2>
<h3 id="1-源文件编码和终端字符集">1. 源文件编码和终端字符集</h3>
<p>相信很多人遇到这个问题之后进行搜索所得到的答案基本上都是<strong>源文件的编码</strong>（1）和<strong>终端字符集</strong>（2）不匹配，这两个虽然也是乱码的两个重要影响因素，但实际上这两个因素理论上来说是不应该去改变的，即我们应该保持源文件编码和终端字符集的差异。之所以这样说，主要有以下两个方面：</p>
<ol>
<li>对于源文件编码，应该尽可能使用多字节编码，这样能在对源文件内容完整编码的同时最大程度上节约空间。而作为世界通用的<code>utf-8</code>和中国专用的<code>gbk</code>这两种编码来说，则通常选择<code>utf-8</code>编码，这也是开源社区最常用的编码。</li>
<li>对于终端字符集，网上会有大量的修改本地字符集的教程，但这种办法都是治标不治本的，即使是在程序内部内置修改本地字符集的代码，我想那也不是用户想要程序去做的事情。我们要做的应该是如何在源文件编码和终端字符集都保持其差异性的情况下使程序正常地输入输出。</li>
</ol>
<p>为了完成这一目标，如果只了解以上所说的两个乱码影响因素是无论如何都解决不了问题的，我们还缺少一个最重要的第三因素将整个过程串联起来，从而才能找到隐藏在其中的乱码的决定性原因。</p>
<div class="note info flat"><p><strong>关于源文件的编码</strong>：</p>
<p>对于一个一般的 C/C++ 源文件，其内容应该分为两部分，一是组成程序的语法部分，二是数据部分。其中数据部分比较特殊的就是字符串字面值。</p>
<p>在源文件中，其字符串字面值通常按照与源文件相同的编码进行保存，即一个<code>utf-8</code>编码的文件中的字符串字面值也将保存为<code>utf-8</code>编码。</p>
<p>请仔细理解这一点，将成为后续理解的基础。</p>
</div>
<h3 id="2-编译器的作用">2. 编译器的作用</h3>
<p>很显然，连接在源文件和终端之间的一个东西就是<strong>编译器</strong>（3），这就是我们要找的第三大因素，下面将详细讲解编译器是如何影响编码的。</p>
<p>如果你使用 MSVC 工具集进行编译，那么你是否发现了这个现象：当源文件使用<code>utf-8</code>（带 BOM）编码时，终端字符集仍然保持<code>GBK</code>编码，此时使用 MSVC 对程序进行编译，得到的程序仍然能够进行正常的输入输出。但相应地如果使用 GCC 编译相同编码的文件，其输出则会产生乱码，这也侧面证明了编译器是在某种程度上影响着乱码问题的产生的。</p>
<p>实际上编译器基本上都会有两类选项，一个是设定输入源文件的编码，另一个是设定输出字符的编码，其中输出字符的编码通常还分为宽字符和窄字符两个细化的设定，本文只讨论窄字符的乱码问题，对于宽字符的编码问题希望读者能够理解原理，举一反三。</p>
<p>在后文中将编译器的这两类选项简称为<strong>设定1</strong>（输入源文件编码设定项）和<strong>设定2</strong>（输出窄字符编码设定项）。</p>
<p>编译器的这两个设定影响编码的具体过程如下所述：</p>
<ol>
<li>
<p>首先编译器将按照设定1的值对源文件编码进行解释，所以如果设定1的值和源文件编码不相同，则通常会导致乱码。</p>
<div class="note info flat"><p>如果设定1的值和源文件编码都是多字节编码，比如一个是<code>gbk</code>，另一个是<code>utf-8</code>，那么程序通常可以正常编译，因为多字节编码的前128个字符通常是相同的，而组成程序语法部分所用到的字符全部都在这 128 个字符中。但相对的，对于数据部分的字符串则由于不同的解释，将会导致乱码。</p>
<p>如果设定1的值是多字节编码，而源文件是双字节或四字节编码，则程序将无法通过编译，因为双字节或四字节编码与多字节编码的前128个字符编码上有差异。</p>
</div>
</li>
<li>
<p>然后编译器会根据设定2的值将字符串数据的编码从源文件编码转换为设定2的编码（实际上中间可能还会进行一次转换，即将源文件编码转换为编译器能够处理的编码，但这一步对整个乱码问题没有影响，所以此处忽略了），所以源文件中的字符串字面值编码首先通过设定1正确识别，然后根据设定2设定的字符集的值转换为对应的字符串字面值编码，最后保存在可执行文件中进行输出。</p>
</li>
</ol>
<h2 id="二、两个决定性原因">二、两个决定性原因</h2>
<p>根据上一节所述的内容可以很清楚地总结出发生乱码问题的两个原因：</p>
<ol>
<li>编译器设定1的值与源文件编码不一致</li>
<li>最终输出的字符串编码所使用的字符集与终端字符集不匹配</li>
</ol>
<h2 id="三、编译器之间的区别">三、编译器之间的区别</h2>
<p>本文将关注 MSVC 和 GCC 两个最常用的编译器及它们之间的区别。</p>
<h3 id="1-MSVC">1. MSVC</h3>
<p>首先是 MSVC，它可以自动识别<code>utf-16</code>（无论是大端还是小端，以及无论是否有 BOM）和<code>utf-8(BOM)</code>的文件，其余的编码都将默认采用用户字符集（在本文中限定为<code>gbk</code>）进行解释，包括<code>utf-8</code>（不带 BOM）也将采用改字符集进行解释。</p>
<p>总结如下：</p>
<ol>
<li>设定1（<code>/source-charset:[charset]</code>）：自动跟随<code>utf-16</code>和<code>utf-8(BOM)</code>文件的编码值，否则默认使用用户字符集（在本文中限定为<code>gbk</code>）</li>
<li>设定2（<code>/execution-charset:[charset]</code>）：默认为用户字符集（在本文中限定为<code>gbk</code>）</li>
<li>设定3（输出宽字符编码设定项）：默认为<code>Unicode</code></li>
</ol>
<h3 id="2-GCC">2. GCC</h3>
<p>相比于 MSVC，GCC 就显得并不那么灵活了，总结如下：</p>
<ol>
<li>设定1（<code>-finput-charset=[charset]</code>）：默认为<code>utf-8</code>（无论是否带 BOM）</li>
<li>设定2（<code>-fexec-charset=[charset]</code>）：默认为<code>utf-8</code></li>
<li>设定3（输出宽字符编码设定项：<code>-fwide-exec-charset=[charset]</code>）：默认为<code>utf-16</code>或<code>utf-32</code>，具体根据<code>wchar_t</code>类型的宽度决定，而<code>wchar_t</code>类型的宽度又通常依赖于平台实现，通常 Windows 实现为 2 字节宽，而 Linux 实现为 4 字节宽。</li>
</ol>
]]></content>
      <categories>
        <category>Windows</category>
        <category>问题探索</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>编码问题</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下Nodejs安装与配置</title>
    <url>//posts/358aad2/</url>
    <content><![CDATA[<h2 id="一、安装">一、安装</h2>
<div class="tabs" id="install_nodejs"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#install_nodejs-1">包管理器安装</button></li><li class="tab"><button type="button" data-href="#install_nodejs-2">二进制文件安装</button></li><li class="tab"><button type="button" data-href="#install_nodejs-3">源码编译安装</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="install_nodejs-1"><p>本篇不会特别指出任何使用包管理器安装 Nodejs 的方法，如果你对包管理器不了解或者说不知道自己的系统的包管理器如何使用，我强烈建议你移步我的另一篇文章：<a href="/posts/9f09e5f1/">Linux 环境一般软件安装方法</a>，该篇文章详细说明了使用包管理器安装软件的一般方法，以后也就不用每次安装软件时都上网搜索了！</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="install_nodejs-2"><ol>
<li>
<p><strong>选择二进制包</strong></p>
<p><a href="https://nodejs.org/en/download">Nodejs 官网</a>提供了一种二进制包，首先通过前面的链接前往其下载页面：</p>
<p><img src="01.png" alt="01"></p>
<p>根据你机器的架构选择对应的二进制包即可。ARM 架构的 CPU 通常是手机平板等设备使用，如果是 PC，则通常选择 x86 即可</p>
<blockquote>
<p><strong>注意</strong>：</p>
<p>既然你都来搜索安装教程了，那我推荐你安装 LTS 版本（即长期支持版本），该版本比较稳定。</p>
</blockquote>
</li>
<li>
<p><strong>下载二进制包</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v18.17.1/node-v18.17.1-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：</p>
<ol>
<li>此处的链接是通过复制下载按钮链接获取的，如果你想下载最新的二进制包请自行前往官网获取</li>
<li><code>wget</code>工具的使用方法请使用<code>wget --help</code>自行获取，本篇不涉及该工具的使用教程</li>
</ol>
</blockquote>
</li>
<li>
<p><strong>解压</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf node-v18.17.1-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：</p>
<ol>
<li>
<p><code>tar</code>工具的使用方法请使用<code>tar --help</code>自行获取，本篇不涉及该工具的使用教程</p>
</li>
<li>
<p>解压会得到一个解压包，我解压所得到的名字是<code>node-v18.17.1-linux-x64</code>，由于你可能下载的版本和我不同，如果你是一个小白，建议你先将这个解压包按照下面的方法重命名，然后再跟着后面的教程走：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> node-v18.17.1-linux-x64 nodejs</span><br></pre></td></tr></table></figure>
<p>该解压包被重命名为<code>nodejs</code>，后续也以该名字为准</p>
</li>
</ol>
</blockquote>
</li>
<li>
<p><strong>将其移动到<code>/opt</code>目录下</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> nodejs /opt/</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>添加环境变量</strong></p>
<p>不出意外的话，此时<code>node</code>、<code>npm</code>等可执行程序应该在<code>/opt/nodejs/bin/</code>目录下，我们需要将其添加到环境变量，才能方便地使用该应用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$PATH</span>:/opt/nodejs/bin&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>测试</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="install_nodejs-3"><ol>
<li>
<p><strong>下载源码包</strong></p>
<p>首先，还是先前往 <a href="https://nodejs.org/en/download">Nodejs 官网</a>，这次我们选择 Source Code</p>
<p><img src="02.png" alt="02"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v18.17.1/node-v18.17.1.tar.gz</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：</p>
<ol>
<li><code>wget</code>工具的使用方法请通过<code>wget --help</code>自行获取，本篇不提供<code>wget</code>的使用教程</li>
<li>此处的链接通过复制下载按钮链接得到，如果你想安装最新版请自行前往官网获取</li>
<li>建议下载 LTS 版本（即长期支持版本）</li>
</ol>
</blockquote>
</li>
<li>
<p><strong>解压</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf node-v18.17.1.tar.gz</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：</p>
<ol>
<li>
<p><code>tar</code>工具的使用方法请通过<code>tar --help</code>自行获取，本篇不提供<code>tar</code>的使用教程</p>
</li>
<li>
<p>我所解压出的包名是<code>node-v18.17.1</code>，由于你下载的版本可能和我的不同，为了方便后续教程的统一性，在此将解压包名修改为<code>nodejs</code>，后续也将以该名字为准：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> node-v18.17.1 nodejs</span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
</li>
<li>
<p><strong>安装编译环境与依赖</strong></p>
<p>具体的编译环境与依赖可以前往官方的教程：<a href="https://github.com/nodejs/node/blob/main/BUILDING.md#building-nodejs-on-supported-platforms">node/BUILDING.md at main · nodejs/node · GitHub</a></p>
<p>主要关注两个地方，其一是某些工具或依赖的版本要求：</p>
<p><img src="03.png" alt="03"></p>
<blockquote>
<p>容易无法达到要求的一般是<code>gcc</code>和<code>g++</code>的版本，但实际测试下来似乎版本低一点也是可以编译成功的，我的版本是 8.5.0，在此仅作参考。</p>
</blockquote>
<p>其二是不同包管理器下的依赖安装方法：</p>
<p><img src="04.png" alt="04"></p>
<blockquote>
<p><strong>注意</strong>：</p>
<p>由于使用包管理器安装的依赖版本可能比较落后，或许无法满足其版本要求，所以可能需要采用其他方式进行安装</p>
</blockquote>
</li>
<li>
<p><strong>配置编译安装</strong></p>
<p>按顺序执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> nodejs				<span class="comment"># 移动到 nodejs 源代码目录</span></span><br><span class="line"><span class="built_in">mkdir</span> /opt/nodejs			<span class="comment"># 在 /opt 下创建新目录 nodejs</span></span><br><span class="line">./configure --prefix=/opt/nodejs	<span class="comment"># 修改安装目录为 /opt/nodejs</span></span><br><span class="line">make					<span class="comment"># 编译</span></span><br><span class="line">make install				<span class="comment"># 安装</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>添加环境变量</strong></p>
<p>由于我们在配置阶段自定义了安装目录，所以可执行程序不会默认安装到系统查找目录下，所以仍然需要将可执行程序添加到环境变量中。（如果上一步你没有设置安装目录，仅仅只是执行了<code>./configure</code>就可以跳过该步骤）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$PATH</span>:/opt/nodejs/bin&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>测试</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<div class="note warning flat"><p><strong>关于通过 npm 包管理器安装工具的默认安装位置</strong>：</p>
<p>在曾经的 nodejs 版本中，通过 npm 安装工具时的默认安装位置在一个具有访问限制的目录下，虽然在该目录下安装可以直接将应用添加到系统默认查找目录从而方便使用，但在某些系统上该默认配置会导致一些权限错误以致于无法安装成功。</p>
<p>你可以通过下面的命令查看当前 npm 包管理器安装应用时的默认位置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config get prefix</span><br></pre></td></tr></table></figure>
<p>如果你使用跟教程一样的版本号或者比教程更新的 nodejs 版本，并且按照上方【二进制文件安装】方法安装好 nodejs 之后，如果不出意外，则输出将会是<code>/opt/nodejs</code>。在我所使用过的 nodejs 版本中，npm 默认安装地址为二进制文件地址的版本最早大概是 18.16。</p>
<p>如果你通过上方的命令所得到的输出和本教程不同，比如为<code>/usr/local</code>等位置，我建议你将 npm 安装地址变更为<code>nodejs</code>所在位置，在本教程中即<code>/opt/nodejs</code>，此时安装的应用会将其可执行程序添加到<code>/opt/nodejs/bin</code>目录下，由于我们已经将此目录添加到了环境变量中，所以可以实现安装即用。</p>
</div>
<h2 id="二、配置">二、配置</h2>
<h3 id="npm-换源">npm 换源</h3>
<p>通过下面这条命令即可更新软件源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure>
<p>然后通过下面的命令查看是否更换成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>软件安装</tag>
        <tag>Nodejs</tag>
        <tag>npm换源</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下Git安装与配置</title>
    <url>//posts/4446d03b/</url>
    <content><![CDATA[<h2 id="一、安装">一、安装</h2>
<div class="tabs" id="installgit"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#installgit-1">包管理器安装</button></li><li class="tab"><button type="button" data-href="#installgit-2">源码编译安装</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="installgit-1"><p>本篇不会特别指出任何使用包管理器安装 Git 的方法，如果你对包管理器不了解或者说不知道自己的系统的包管理器如何使用，我强烈建议你移步我的另一篇文章：<a href="/posts/9f09e5f1/">Linux 环境一般软件安装方法</a>，该篇文章详细说明了使用包管理器安装软件的一般方法，以后也就不用每次安装软件时都上网搜索了！</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="installgit-2"><ol>
<li>
<p><strong>下载源码</strong></p>
<p>你可以在 <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> 看到官网上所标注的最新的源代码版本，然后通过 <a href="https://mirrors.edge.kernel.org/pub/software/scm/git/">https://mirrors.edge.kernel.org/pub/software/scm/git/</a> 找到对应的版本下载即可。我所下载的文件是：<code>git-2.42.0.tar.gz</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.42.0.tar.gz</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：</p>
<ol>
<li>可以在任何目录使用该命令，但如果是一些访问受限的系统目录下，需要登录<code>root</code>用户执行或在命令前加上<code>sudo</code>，后续命令同理</li>
<li>关于<code>wget</code>工具的用法可以通过<code>wget --help</code>进行查看，此处不详细介绍</li>
</ol>
</blockquote>
</li>
<li>
<p><strong>解压压缩包</strong></p>
<p>我们下载下来的文件是一个<code>.tar.gz</code>的压缩包，需要用<code>tar</code>工具进行解压，如果没有该工具，则通过包管理器下载即可，包名称就叫<code>tar</code>。以下是解压命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf git-2.42.0.tar.gz</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：</p>
<ol>
<li>
<p>关于<code>tar</code>工具的用法可以通过<code>tar --help</code>进行查看，此处不详细介绍</p>
</li>
<li>
<p>解压出来的目录名应该是<code>git-2.42.0</code>，考虑到本教程的通用性，我选择将其重命名为<code>git</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> git-2.42.0 git</span><br></pre></td></tr></table></figure>
<p>后续也请读者以<code>git</code>为准</p>
</li>
</ol>
</blockquote>
</li>
<li>
<p><strong>依赖安装</strong></p>
<p>Git 的依赖库包含：<code>autotools</code>、<code>curl</code>、<code>zlib</code>、<code>openssl</code>、<code>expat</code>和<code>libiconv</code>。它们的包名分别是：<code>dh-autoreconf</code>、<code>curl-devel</code>、<code>expat-devel</code>、<code>gettext-devel</code>、<code>openssl-devel</code>、<code>perl-devel</code>、<code>zlib-devel</code>，请使用包管理器自行安装以上依赖库，本篇不提供包管理器的使用方法。</p>
<blockquote>
<p><strong>注意</strong>：</p>
<p>使用 RHEL 和 RHEL 衍生版，如 CentOS 和 Scientific Linux 的用户可能需要开启 EPEL 库</p>
</blockquote>
</li>
<li>
<p><strong>编译安装</strong></p>
<p>依次执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> git				<span class="comment"># 进入之前解压出来的 git 源代码目录下</span></span><br><span class="line">make configure			<span class="comment"># 生成配置文件</span></span><br><span class="line"><span class="built_in">mkdir</span> /opt/git			<span class="comment"># 在 /opt 下创建一个新目录用于安装 git</span></span><br><span class="line">./configure --prefix=/opt/git	<span class="comment"># 修改配置中的安装位置到 /opt/git</span></span><br><span class="line">make				<span class="comment"># 编译</span></span><br><span class="line">make install			<span class="comment"># 安装</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>将 git 安装路径添加到环境变量</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$PATH</span>:/opt/git/bin&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>测试 git</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="二、配置">二、配置</h2>
<h3 id="1-配置-SSH-连接">1. 配置 SSH 连接</h3>
<div class="note info flat"><p>如果你使用 git 是为了能够往远程仓库推送内容，我推荐你配置一下 SSH 连接。而如果仅仅是为了克隆仓库到本地而不进行任何推送，则完全可以不配置 SSH 连接。</p>
<p>首先 ssh 和 git 是两个完全分离的工具，不要将它们混到一起。ssh 是 git 支持的一种传输方式，要启用这种传输，首先需要配置 ssh 密钥，从而将本地机器和远程 Github 服务器连接起来。</p>
</div>
<ul>
<li>
<p><strong>创建 SSH Key</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;&lt;your name&gt;&quot;</span></span><br></pre></td></tr></table></figure>
<div class="note warning flat"><p>如果以前创建过这个密钥，则可以跳过这一步，通常在<code>~/.ssh/</code>目录下就可以找到以前创建的密钥文件。</p>
</div>
<div class="note info flat"><p>输入该命令之后会有一些输出，也会让你输入一些内容，比如创建密钥的位置，使用密钥的密码等等，通常保持默认即可，即一路回车。</p>
</div>
<p>创建成功后你可以看到如下输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Your identification has been saved in /home/Username/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /home/Username/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:RwvBINgH8CEt2KniltmykeyDsOseUYcwMzehFeyT86s emailnum@email.com</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">| o+%OO+o.        |</span><br><span class="line">|..=+%*+ ..       |</span><br><span class="line">| ..+o+o.. .      |</span><br><span class="line">|o.  o=.  o .     |</span><br><span class="line">|o oolalala S o      |</span><br><span class="line">| +.+.. . .       |</span><br><span class="line">|. .o    .        |</span><br><span class="line">|  . .  .         |</span><br><span class="line">|   . E.          |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>复制公钥</strong></p>
<p>如果按照默认配置，则你的公钥文件<code>id_rsa.pub</code>应该放在<code>~/.ssh/</code>目录下，使用任何编辑器如 vim、gedit 打开该文件都可以，然后复制其中内容</p>
</li>
<li>
<p><strong>配置 Github SSH 密钥</strong></p>
<p>进入自己的 Github 主页，依次点击【Setting】-&gt;【SSH and GPG Keys】-&gt;【New SSH Key】按钮，Title 任意内容皆可，通常我比较喜欢和自己在创建 ssh 密钥时填写的名字一样。</p>
<p>然后将刚刚复制的密钥内容粘贴到下方文本框中，保存即可。</p>
</li>
<li>
<p><strong>测试 ssh 连接</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>第一次使用该密钥连接时会询问是否继续连接，输入<code>yes</code>回车确认即可，最后如果看到如下输出则说明配置成功了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi You! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-其他配置">2. 其他配置</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;&lt;你的用户名&gt;&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;&lt;你的邮箱&gt;&quot;</span></span><br><span class="line">git config --global core.quotepath <span class="literal">false</span>		<span class="comment"># 解决中文路径显示乱码的问题</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Git</tag>
        <tag>软件安装</tag>
        <tag>软件配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境一般软件安装方法</title>
    <url>//posts/9f09e5f1/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>在刚开始学习使用 Linux 系统的时候，估计大家都在网上搜索过类似于如何在 Linux 上安装某某软件之类的问题，而且通常需要指明自己所使用的 Linux 发行版才能得到一个实际可行的解决方法。而且当你想要安装另一个不同的软件的时候，你又会像之前一样重新搜索一遍，你是否会发现实际上它们的安装方法都非常类似。</p>
<p>实际上，在 Linux 上安装某个软件，大概就是三种方法，最快速方便的方法就是使用<strong>包管理器</strong>进行安装；第二种是下载软件厂商已经为你编译好的<strong>二进制文件</strong>到系统进行安装；第三种是最耗时间也是出错率比较高的一种安装方法，即下载软件<strong>源代码</strong>，自行编译安装。</p>
<p>使用包管理器进行安装最为方便，但缺点其实也是最多的。对于初学者来说，由于本身对于包管理器没有一个清晰的认识，所以当你到另一个使用不同的包管理器的 Linux 系统上时就可能会无从下手，这也是为什么当你搜索一个软件安装教程的时候通常需要指定实际 Linux 的发行版名称才能得到一个比较可行的教程。另外，实际上包管理器就相当于你手机的应用商店，它的所有软件资源实际上是统一放在一个服务器中供包管理器使用的，由于这个服务器中的软件往往并不是和该软件官网发布的版本同步更新的，所以这也就导致你通过包管理器进行安装的软件要比该软件官网当前版本落后几个版本。</p>
<p>而使用二进制文件或者是使用源代码编译的方式进行安装，则不会有上述两个缺点，但相反要对软件的工作方式以及编译方法比较了解。</p>
<div class="note info flat"><p>本篇将着重介绍包管理器以及使用包管理器的软件安装方法，而使用二进制文件以及源代码编译的安装方式则简单介绍一下，特别是源代码编译的安装方式，由于各种软件编写方式不同，所以它们通过源代码编译的安装方式多多少少也有一点区别，对于某些软件我将会单独写一篇文章来介绍如何通过二进制文件或者源代码编译的方式进行安装，本篇中主要介绍通过包管理器安装软件的通用方法。</p>
</div>
<h2 id="一、包管理器安装">一、包管理器安装</h2>
<p>包管理器一般有两部分，一个是包管理器本身，另一个是包管理器的前端。比如在 Ubuntu 中，包管理器就是 dpkg，而其前端通常是 apt。二者的区别大概就是：包管理器本身如 dpkg 只负责安装现有的安装包，而包管理器的前端通常是从远程服务器下载对应安装包到系统上，然后调用包管理器来对软件进行安装。我们通常都是使用前端在远程获取安装包，但有时当远程服务器没有这个软件的时候，此时如果该软件官网提供了对应包管理器的安装包，我们也可以直接下载这样的安装包，然后使用包管理器进行安装。</p>
<p>比较常见的包管理器及其前端以及它们的使用方法如下：</p>
<div class="tabs" id="package_managers"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#package_managers-1">DPKG</button></li><li class="tab"><button type="button" data-href="#package_managers-2">RPM</button></li><li class="tab"><button type="button" data-href="#package_managers-3">PACMAN</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="package_managers-1"><p>dpkg 是 Debian Linux 家族的基础包管理系统，它用于安装、删除、存储和提供<code>.deb</code>包的信息。</p>
<blockquote>
<p><strong>常用命令</strong>：</p>
<p>参考：<a href="https://www.linuxcool.com/dpkg">dpkg命令 – 管理软件安装包 – Linux命令大全(手册) (linuxcool.com)</a></p>
</blockquote>
<p><strong>前端管理器</strong>：APT</p>
<p>由于 APT 比较常用，所以此处仅介绍 APT。</p>
<p>这个是一个 dpkg 包管理系统的前端工具，它是一个非常受欢迎的、自由而强大的，有用的命令行包管理器系统。</p>
<p>Debian 及其衍生版，例如 Ubuntu 和 Linux Mint 的用户应该非常熟悉这个包管理工具。</p>
<blockquote>
<p><strong>常用命令</strong>：</p>
<p>参考：<a href="https://www.linuxcool.com/apt-get">apt-get命令 – 管理服务软件 – Linux命令大全(手册) (linuxcool.com)</a></p>
</blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="package_managers-2"><p>这个是红帽创建的 Linux 基本标准（LSB）打包格式和基础包管理系统。</p>
<blockquote>
<p><strong>常用命令</strong>：</p>
<p><a href="https://www.linuxcool.com/rpm">rpm命令 – RPM软件包管理器 – Linux命令大全(手册) (linuxcool.com)</a></p>
</blockquote>
<p><strong>前端管理器</strong>：YUM</p>
<p>这个是一个开源、流行的命令行包管理器，它是用户使用 RPM 的界面（之一）。你可以把它和 Debian Linux 系统中的 APT 进行对比，它和 APT 拥有相同的功能。</p>
<blockquote>
<p><strong>常用命令</strong>：</p>
<p><a href="https://www.linuxcool.com/yum">yum命令 – 基于RPM的软件包管理器 – Linux命令大全(手册) (linuxcool.com)</a></p>
</blockquote>
<p><strong>前端管理器</strong>：DNF</p>
<p>这个也是一个用于基于 RPM 的发行版的包管理器，Fedora 18 引入了它，它是下一代 YUM。</p>
<p>如果你用 Fedora 22 及更新版本，你肯定知道它是默认的包管理器。</p>
<blockquote>
<p><strong>常用命令</strong>：</p>
<p><a href="https://www.linuxcool.com/dnf">dnf命令 – 新一代的软件包管理器 – Linux命令大全(手册) (linuxcool.com)</a></p>
</blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="package_managers-3"><p>这个是一个流行的、强大而易用的包管理器，它用于 Arch Linux 和其他的一些小众发行版。它提供了一些其他包管理器提供的基本功能，包括安装、自动解决依赖关系、升级、卸载和降级软件。</p>
<blockquote>
<p><strong>常用命令</strong>：</p>
<p><a href="https://www.linuxcool.com/pacman">pacman命令 – 软件包管理器 – Linux命令大全(手册) (linuxcool.com)</a></p>
</blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<div class="note primary flat"><p><strong>关于依赖</strong></p>
<p>Linux 和 Windows 的一个不同的地方就在于：Windows 中所安装的软件包会将自己所用到的所有的例如第三方库之类的依赖和自己的软件主体一起打包到一个安装包中，这方便了开发人员也方便了使用用户，但是却可能造成一个问题，就是有可能你某个软件里使用到了的依赖另一个软件中也用到了，但是它们在系统中却占有两份空间。而 Linux 则采用与之不同的方案，就是当你安装一个软件的时候，需要先安装好该软件的所有依赖才能正常运行，而依赖可能也有依赖，依次类推。这样的方式使软件的空间占有率得以下降，但相反的在安装时需要注意的地方就多了。</p>
<p>当你使用包管理器安装软件的时候，大多数的包管理器都可以自动处理依赖关系，当你安装软件时，包管理器会自动为你安装该软件的所有能找到的依赖，所以通常不用过多担心。实际上，即使没有自动为你安装依赖，在安装时包管理器也会提醒你缺哪些依赖，你再像安装一般软件一样安装依赖就可以了。</p>
</div>
<h2 id="二、二进制文件安装">二、二进制文件安装</h2>
<p>使用二进制文件安装软件是一个不错的选择，既可以安装到最新（或较新）的软件，过程也比较简单和通用。一般的二进制软件安装过程如下：</p>
<ul>
<li>下载二进制软件，并将其解压，解压包通常放置在一个统一的目录方便管理（通常会选择在<code>/opt/</code>目录）</li>
<li>将解压包中的可执行程序添加软链到系统查找目录（如<code>/usr/local/bin/</code>、<code>/usr/bin/</code>等）</li>
<li>在任意目录测试该可执行程序是否可以正常执行</li>
</ul>
<h2 id="三、源代码编译安装">三、源代码编译安装</h2>
<p>该方法的灵活性就比较高了，但也有基本操作步骤：</p>
<ul>
<li>下载源代码</li>
<li>配置编译条件</li>
<li>编译、安装</li>
</ul>
<p>从源代码的下载方式，到编译条件的配置方式以及最后编译以及安装的方式都各不相同，就不在此多废话，具体的软件的源代码编译安装方法就去找对应的软件安装教程即可，但还是要提一句，在 Linux 上最常见的软件还是使用 C/C++ 编写的，并且它们的配置以及编译安装的方式也都差不多，通常保证你的系统里有 gcc、g++、make 这几个软件就可以完成编译了。</p>
<h2 id="推荐">推荐</h2>
<div class="note info flat"><p><strong>通过下方链接可以前往本博客已经提供的使用二进制文件方法或者源代码编译方法的安装教程：</strong></p>
<ul>
<li><a href="/posts/4446d03b/">Git</a></li>
<li><a href="/posts/358aad2/">nodejs</a></li>
</ul>
</div>
]]></content>
      <categories>
        <category>Linux</category>
        <category>基本使用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>软件安装</tag>
      </tags>
  </entry>
</search>
