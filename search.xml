<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>编程中乱码出现的原因</title>
    <url>//posts/c77f42f7/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>本文将探索在编程过程中出现乱码问题的具体原因。之所以加了个前缀 “编程过程中” 是因为我并非是要说明乱码本身出现的原因即编码与解码阶段使用的编码不一致，这个原因很好理解并且也已经有很多人讲过了。</p>
<p>本文所探讨的是在编程过程中由于各种中间环节的影响，即使你清楚乱码产生的原因，也仍然可能无法避免地产生乱码的问题。</p>
<p>另外，由于在 Linux 环境下几乎不会遇到这样的问题（如果我们统一使用<code>utf-8</code>的文件格式与<code>utf-8</code>的用户字符集并且使用 GNU GCC 作为编译器的话），所以本文的全部内容都将基于 Windows 环境下的乱码问题进行介绍，中文环境将以<code>gbk</code>为准。</p>
<h2 id="一、三大影响因素">一、三大影响因素</h2>
<h3 id="1-源文件编码和终端字符集">1. 源文件编码和终端字符集</h3>
<p>相信很多人遇到这个问题之后进行搜索所得到的答案基本上都是<strong>源文件的编码</strong>（1）和<strong>终端字符集</strong>（2）不匹配，这两个虽然也是乱码的两个重要影响因素，但实际上这两个因素理论上来说是不应该去改变的，即我们应该保持源文件编码和终端字符集的差异。之所以这样说，主要有以下两个方面：</p>
<ol>
<li>对于源文件编码，应该尽可能使用多字节编码，这样能在对源文件内容完整编码的同时最大程度上节约空间。而作为世界通用的<code>utf-8</code>和中国专用的<code>gbk</code>这两种编码来说，则通常选择<code>utf-8</code>编码，这也是开源社区最常用的编码。</li>
<li>对于终端字符集，网上会有大量的修改本地字符集的教程，但这种办法都是治标不治本的，即使是在程序内部内置修改本地字符集的代码，我想那也不是用户想要程序去做的事情。我们要做的应该是如何在源文件编码和终端字符集都保持其差异性的情况下使程序正常地输入输出。</li>
</ol>
<p>为了完成这一目标，如果只了解以上所说的两个乱码影响因素是无论如何都解决不了问题的，我们还缺少一个最重要的第三因素将整个过程串联起来，从而才能找到隐藏在其中的乱码的决定性原因。</p>
<div class="note info flat"><p><strong>关于源文件的编码</strong>：</p>
<p>对于一个一般的 C/C++ 源文件，其内容应该分为两部分，一是组成程序的语法部分，二是数据部分。其中数据部分比较特殊的就是字符串字面值。</p>
<p>在源文件中，其字符串字面值通常按照与源文件相同的编码进行保存，即一个<code>utf-8</code>编码的文件中的字符串字面值也将保存为<code>utf-8</code>编码。</p>
<p>请仔细理解这一点，将成为后续理解的基础。</p>
</div>
<h3 id="2-编译器的作用">2. 编译器的作用</h3>
<p>很显然，连接在源文件和终端之间的一个东西就是<strong>编译器</strong>（3），这就是我们要找的第三大因素，下面将详细讲解编译器是如何影响编码的。</p>
<p>如果你使用 MSVC 工具集进行编译，那么你是否发现了这个现象：当源文件使用<code>utf-8</code>（带 BOM）编码时，终端字符集仍然保持<code>GBK</code>编码，此时使用 MSVC 对程序进行编译，得到的程序仍然能够进行正常的输入输出。但相应地如果使用 GCC 编译相同编码的文件，其输出则会产生乱码，这也侧面证明了编译器是在某种程度上影响着乱码问题的产生的。</p>
<p>实际上编译器基本上都会有两类选项，一个是设定输入源文件的编码，另一个是设定输出字符的编码，其中输出字符的编码通常还分为宽字符和窄字符两个细化的设定，本文只讨论窄字符的乱码问题，对于宽字符的编码问题希望读者能够理解原理，举一反三。</p>
<p>在后文中将编译器的这两类选项简称为<strong>设定1</strong>（输入源文件编码设定项）和<strong>设定2</strong>（输出窄字符编码设定项）。</p>
<p>编译器的这两个设定影响编码的具体过程如下所述：</p>
<ol>
<li>
<p>首先编译器将按照设定1的值对源文件编码进行解释，所以如果设定1的值和源文件编码不相同，则通常会导致乱码。</p>
<div class="note info flat"><p>如果设定1的值和源文件编码都是多字节编码，比如一个是<code>gbk</code>，另一个是<code>utf-8</code>，那么程序通常可以正常编译，因为多字节编码的前128个字符通常是相同的，而组成程序语法部分所用到的字符全部都在这 128 个字符中。但相对的，对于数据部分的字符串则由于不同的解释，将会导致乱码。</p>
<p>如果设定1的值是多字节编码，而源文件是双字节或四字节编码，则程序将无法通过编译，因为双字节或四字节编码与多字节编码的前128个字符编码上有差异。</p>
</div>
</li>
<li>
<p>然后编译器会根据设定2的值将字符串数据的编码从源文件编码转换为设定2的编码（实际上中间可能还会进行一次转换，即将源文件编码转换为编译器能够处理的编码，但这一步对整个乱码问题没有影响，所以此处忽略了），所以源文件中的字符串字面值编码首先通过设定1正确识别，然后根据设定2设定的字符集的值转换为对应的字符串字面值编码，最后保存在可执行文件中进行输出。</p>
</li>
</ol>
<h2 id="二、两个决定性原因">二、两个决定性原因</h2>
<p>根据上一节所述的内容可以很清楚地总结出发生乱码问题的两个原因：</p>
<ol>
<li>编译器设定1的值与源文件编码不一致</li>
<li>最终输出的字符串编码所使用的字符集与终端字符集不匹配</li>
</ol>
<h2 id="三、编译器之间的区别">三、编译器之间的区别</h2>
<p>本文将关注 MSVC 和 GCC 两个最常用的编译器及它们之间的区别。</p>
<h3 id="1-MSVC">1. MSVC</h3>
<p>首先是 MSVC，它可以自动识别<code>utf-16</code>（无论是大端还是小端，以及无论是否有 BOM）和<code>utf-8(BOM)</code>的文件，其余的编码都将默认采用用户字符集（在本文中限定为<code>gbk</code>）进行解释，包括<code>utf-8</code>（不带 BOM）也将采用改字符集进行解释。</p>
<p>总结如下：</p>
<ol>
<li>设定1（<code>/source-charset:[charset]</code>）：自动跟随<code>utf-16</code>和<code>utf-8(BOM)</code>文件的编码值，否则默认使用用户字符集（在本文中限定为<code>gbk</code>）</li>
<li>设定2（<code>/execution-charset:[charset]</code>）：默认为用户字符集（在本文中限定为<code>gbk</code>）</li>
<li>设定3（输出宽字符编码设定项）：默认为<code>Unicode</code></li>
</ol>
<h3 id="2-GCC">2. GCC</h3>
<p>相比于 MSVC，GCC 就显得并不那么灵活了，总结如下：</p>
<ol>
<li>设定1（<code>-finput-charset=[charset]</code>）：默认为<code>utf-8</code>（无论是否带 BOM）</li>
<li>设定2（<code>-fexec-charset=[charset]</code>）：默认为<code>utf-8</code></li>
<li>设定3（输出宽字符编码设定项：<code>-fwide-exec-charset=[charset]</code>）：默认为<code>utf-16</code>或<code>utf-32</code>，具体根据<code>wchar_t</code>类型的宽度决定，而<code>wchar_t</code>类型的宽度又通常依赖于平台实现，通常 Windows 实现为 2 字节宽，而 Linux 实现为 4 字节宽。</li>
</ol>
]]></content>
      <categories>
        <category>Windows</category>
        <category>问题探索</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Windows</tag>
        <tag>乱码</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下Nodejs安装与配置</title>
    <url>//posts/358aad2/</url>
    <content><![CDATA[<h2 id="一、安装">一、安装</h2>
<div class="tabs" id="install_nodejs"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#install_nodejs-1">包管理器安装</button></li><li class="tab"><button type="button" data-href="#install_nodejs-2">二进制文件安装</button></li><li class="tab"><button type="button" data-href="#install_nodejs-3">源码编译安装</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="install_nodejs-1"><p>本篇不会特别指出任何使用包管理器安装 Nodejs 的方法，如果你对包管理器不了解或者说不知道自己的系统的包管理器如何使用，我强烈建议你移步我的另一篇文章：<a href="/posts/9f09e5f1/">Linux 环境一般软件安装方法</a>，该篇文章详细说明了使用包管理器安装软件的一般方法，以后也就不用每次安装软件时都上网搜索了！</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="install_nodejs-2"><ol>
<li>
<p><strong>选择二进制包</strong></p>
<p><a href="https://nodejs.org/en/download">Nodejs 官网</a>提供了一种二进制包，首先通过前面的链接前往其下载页面：</p>
<p><img src="/images/358aad2/01.png" alt="01"></p>
<p>根据你机器的架构选择对应的二进制包即可。ARM 架构的 CPU 通常是手机平板等设备使用，如果是 PC，则通常选择 x86 即可</p>
<blockquote>
<p><strong>注意</strong>：</p>
<p>既然你都来搜索安装教程了，那我推荐你安装 LTS 版本（即长期支持版本），该版本比较稳定。</p>
</blockquote>
</li>
<li>
<p><strong>下载二进制包</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v18.17.1/node-v18.17.1-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：</p>
<ol>
<li>此处的链接是通过复制下载按钮链接获取的，如果你想下载最新的二进制包请自行前往官网获取</li>
<li><code>wget</code>工具的使用方法请使用<code>wget --help</code>自行获取，本篇不涉及该工具的使用教程</li>
</ol>
</blockquote>
</li>
<li>
<p><strong>解压</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf node-v18.17.1-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：</p>
<ol>
<li>
<p><code>tar</code>工具的使用方法请使用<code>tar --help</code>自行获取，本篇不涉及该工具的使用教程</p>
</li>
<li>
<p>解压会得到一个解压包，我解压所得到的名字是<code>node-v18.17.1-linux-x64</code>，由于你可能下载的版本和我不同，如果你是一个小白，建议你先将这个解压包按照下面的方法重命名，然后再跟着后面的教程走：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> node-v18.17.1-linux-x64 nodejs</span><br></pre></td></tr></table></figure>
<p>该解压包被重命名为<code>nodejs</code>，后续也以该名字为准</p>
</li>
</ol>
</blockquote>
</li>
<li>
<p><strong>将其移动到<code>/opt</code>目录下</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> nodejs /opt/</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>添加环境变量</strong></p>
<p>不出意外的话，此时<code>node</code>、<code>npm</code>等可执行程序应该在<code>/opt/nodejs/bin/</code>目录下，我们需要将其添加到环境变量，才能方便地使用该应用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$PATH</span>:/opt/nodejs/bin&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>测试</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="install_nodejs-3"><ol>
<li>
<p><strong>下载源码包</strong></p>
<p>首先，还是先前往 <a href="https://nodejs.org/en/download">Nodejs 官网</a>，这次我们选择 Source Code</p>
<p><img src="/images/358aad2/02.png" alt="02"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v18.17.1/node-v18.17.1.tar.gz</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：</p>
<ol>
<li><code>wget</code>工具的使用方法请通过<code>wget --help</code>自行获取，本篇不提供<code>wget</code>的使用教程</li>
<li>此处的链接通过复制下载按钮链接得到，如果你想安装最新版请自行前往官网获取</li>
<li>建议下载 LTS 版本（即长期支持版本）</li>
</ol>
</blockquote>
</li>
<li>
<p><strong>解压</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf node-v18.17.1.tar.gz</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：</p>
<ol>
<li>
<p><code>tar</code>工具的使用方法请通过<code>tar --help</code>自行获取，本篇不提供<code>tar</code>的使用教程</p>
</li>
<li>
<p>我所解压出的包名是<code>node-v18.17.1</code>，由于你下载的版本可能和我的不同，为了方便后续教程的统一性，在此将解压包名修改为<code>nodejs</code>，后续也将以该名字为准：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> node-v18.17.1 nodejs</span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
</li>
<li>
<p><strong>安装编译环境与依赖</strong></p>
<p>具体的编译环境与依赖可以前往官方的教程：<a href="https://github.com/nodejs/node/blob/main/BUILDING.md#building-nodejs-on-supported-platforms">node/BUILDING.md at main · nodejs/node · GitHub</a></p>
<p>主要关注两个地方，其一是某些工具或依赖的版本要求：</p>
<p><img src="/images/358aad2/03.png" alt="03"></p>
<blockquote>
<p>容易无法达到要求的一般是<code>gcc</code>和<code>g++</code>的版本，但实际测试下来似乎版本低一点也是可以编译成功的，我的版本是 8.5.0，在此仅作参考。</p>
</blockquote>
<p>其二是不同包管理器下的依赖安装方法：</p>
<p><img src="/images/358aad2/04.png" alt="04"></p>
<blockquote>
<p><strong>注意</strong>：</p>
<p>由于使用包管理器安装的依赖版本可能比较落后，或许无法满足其版本要求，所以可能需要采用其他方式进行安装</p>
</blockquote>
</li>
<li>
<p><strong>配置编译安装</strong></p>
<p>按顺序执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> nodejs				<span class="comment"># 移动到 nodejs 源代码目录</span></span><br><span class="line"><span class="built_in">mkdir</span> /opt/nodejs			<span class="comment"># 在 /opt 下创建新目录 nodejs</span></span><br><span class="line">./configure --prefix=/opt/nodejs	<span class="comment"># 修改安装目录为 /opt/nodejs</span></span><br><span class="line">make					<span class="comment"># 编译</span></span><br><span class="line">make install				<span class="comment"># 安装</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>添加环境变量</strong></p>
<p>由于我们在配置阶段自定义了安装目录，所以可执行程序不会默认安装到系统查找目录下，所以仍然需要将可执行程序添加到环境变量中。（如果上一步你没有设置安装目录，仅仅只是执行了<code>./configure</code>就可以跳过该步骤）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$PATH</span>:/opt/nodejs/bin&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>测试</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<div class="note warning flat"><p><strong>关于通过 npm 包管理器安装工具的默认安装位置</strong>：</p>
<p>在曾经的 nodejs 版本中，通过 npm 安装工具时的默认安装位置在一个具有访问限制的目录下，虽然在该目录下安装可以直接将应用添加到系统默认查找目录从而方便使用，但在某些系统上该默认配置会导致一些权限错误以致于无法安装成功。</p>
<p>你可以通过下面的命令查看当前 npm 包管理器安装应用时的默认位置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config get prefix</span><br></pre></td></tr></table></figure>
<p>如果你使用跟教程一样的版本号或者比教程更新的 nodejs 版本，并且按照上方【二进制文件安装】方法安装好 nodejs 之后，如果不出意外，则输出将会是<code>/opt/nodejs</code>。在我所使用过的 nodejs 版本中，npm 默认安装地址为二进制文件地址的版本最早大概是 18.16。</p>
<p>如果你通过上方的命令所得到的输出和本教程不同，比如为<code>/usr/local</code>等位置，我建议你将 npm 安装地址变更为<code>nodejs</code>所在位置，在本教程中即<code>/opt/nodejs</code>，此时安装的应用会将其可执行程序添加到<code>/opt/nodejs/bin</code>目录下，由于我们已经将此目录添加到了环境变量中，所以可以实现安装即用。</p>
</div>
<h2 id="二、配置">二、配置</h2>
<h3 id="npm-换源">npm 换源</h3>
<p>通过下面这条命令即可更新软件源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure>
<p>然后通过下面的命令查看是否更换成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>安装</tag>
        <tag>教程</tag>
        <tag>Nodejs</tag>
        <tag>npm换源</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下Git安装与配置</title>
    <url>//posts/4446d03b/</url>
    <content><![CDATA[<h2 id="一、安装">一、安装</h2>
<div class="tabs" id="installgit"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#installgit-1">包管理器安装</button></li><li class="tab"><button type="button" data-href="#installgit-2">源码编译安装</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="installgit-1"><p>本篇不会特别指出任何使用包管理器安装 Git 的方法，如果你对包管理器不了解或者说不知道自己的系统的包管理器如何使用，我强烈建议你移步我的另一篇文章：<a href="/posts/9f09e5f1/">Linux 环境一般软件安装方法</a>，该篇文章详细说明了使用包管理器安装软件的一般方法，以后也就不用每次安装软件时都上网搜索了！</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="installgit-2"><ol>
<li>
<p><strong>下载源码</strong></p>
<p>你可以在 <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> 看到官网上所标注的最新的源代码版本，然后通过 <a href="https://mirrors.edge.kernel.org/pub/software/scm/git/">https://mirrors.edge.kernel.org/pub/software/scm/git/</a> 找到对应的版本下载即可。我所下载的文件是：<code>git-2.42.0.tar.gz</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.42.0.tar.gz</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：</p>
<ol>
<li>可以在任何目录使用该命令，但如果是一些访问受限的系统目录下，需要登录<code>root</code>用户执行或在命令前加上<code>sudo</code>，后续命令同理</li>
<li>关于<code>wget</code>工具的用法可以通过<code>wget --help</code>进行查看，此处不详细介绍</li>
</ol>
</blockquote>
</li>
<li>
<p><strong>解压压缩包</strong></p>
<p>我们下载下来的文件是一个<code>.tar.gz</code>的压缩包，需要用<code>tar</code>工具进行解压，如果没有该工具，则通过包管理器下载即可，包名称就叫<code>tar</code>。以下是解压命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf git-2.42.0.tar.gz</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：</p>
<ol>
<li>
<p>关于<code>tar</code>工具的用法可以通过<code>tar --help</code>进行查看，此处不详细介绍</p>
</li>
<li>
<p>解压出来的目录名应该是<code>git-2.42.0</code>，考虑到本教程的通用性，我选择将其重命名为<code>git</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> git-2.42.0 git</span><br></pre></td></tr></table></figure>
<p>后续也请读者以<code>git</code>为准</p>
</li>
</ol>
</blockquote>
</li>
<li>
<p><strong>依赖安装</strong></p>
<p>Git 的依赖库包含：<code>autotools</code>、<code>curl</code>、<code>zlib</code>、<code>openssl</code>、<code>expat</code>和<code>libiconv</code>。它们的包名分别是：<code>dh-autoreconf</code>、<code>curl-devel</code>、<code>expat-devel</code>、<code>gettext-devel</code>、<code>openssl-devel</code>、<code>perl-devel</code>、<code>zlib-devel</code>，请使用包管理器自行安装以上依赖库，本篇不提供包管理器的使用方法。</p>
<blockquote>
<p><strong>注意</strong>：</p>
<p>使用 RHEL 和 RHEL 衍生版，如 CentOS 和 Scientific Linux 的用户可能需要开启 EPEL 库</p>
</blockquote>
</li>
<li>
<p><strong>编译安装</strong></p>
<p>依次执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> git				<span class="comment"># 进入之前解压出来的 git 源代码目录下</span></span><br><span class="line">make configure			<span class="comment"># 生成配置文件</span></span><br><span class="line"><span class="built_in">mkdir</span> /opt/git			<span class="comment"># 在 /opt 下创建一个新目录用于安装 git</span></span><br><span class="line">./configure --prefix=/opt/git	<span class="comment"># 修改配置中的安装位置到 /opt/git</span></span><br><span class="line">make				<span class="comment"># 编译</span></span><br><span class="line">make install			<span class="comment"># 安装</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>将 git 安装路径添加到环境变量</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$PATH</span>:/opt/git/bin&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>测试 git</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>
</li>
</ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="二、配置">二、配置</h2>
<h3 id="1-配置-SSH-连接">1. 配置 SSH 连接</h3>
<div class="note info flat"><p>如果你使用 git 是为了能够往远程仓库推送内容，我推荐你配置一下 SSH 连接。而如果仅仅是为了克隆仓库到本地而不进行任何推送，则完全可以不配置 SSH 连接。</p>
<p>首先 ssh 和 git 是两个完全分离的工具，不要将它们混到一起。ssh 是 git 支持的一种传输方式，要启用这种传输，首先需要配置 ssh 密钥，从而将本地机器和远程 Github 服务器连接起来。</p>
</div>
<ul>
<li>
<p><strong>创建 SSH Key</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;&lt;your name&gt;&quot;</span></span><br></pre></td></tr></table></figure>
<div class="note warning flat"><p>如果以前创建过这个密钥，则可以跳过这一步，通常在<code>~/.ssh/</code>目录下就可以找到以前创建的密钥文件。</p>
</div>
<div class="note info flat"><p>输入该命令之后会有一些输出，也会让你输入一些内容，比如创建密钥的位置，使用密钥的密码等等，通常保持默认即可，即一路回车。</p>
</div>
<p>创建成功后你可以看到如下输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Your identification has been saved in /home/Username/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /home/Username/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:RwvBINgH8CEt2KniltmykeyDsOseUYcwMzehFeyT86s emailnum@email.com</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">| o+%OO+o.        |</span><br><span class="line">|..=+%*+ ..       |</span><br><span class="line">| ..+o+o.. .      |</span><br><span class="line">|o.  o=.  o .     |</span><br><span class="line">|o oolalala S o      |</span><br><span class="line">| +.+.. . .       |</span><br><span class="line">|. .o    .        |</span><br><span class="line">|  . .  .         |</span><br><span class="line">|   . E.          |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>复制公钥</strong></p>
<p>如果按照默认配置，则你的公钥文件<code>id_rsa.pub</code>应该放在<code>~/.ssh/</code>目录下，使用任何编辑器如 vim、gedit 打开该文件都可以，然后复制其中内容</p>
</li>
<li>
<p><strong>配置 Github SSH 密钥</strong></p>
<p>进入自己的 Github 主页，依次点击【Setting】-&gt;【SSH and GPG Keys】-&gt;【New SSH Key】按钮，Title 任意内容皆可，通常我比较喜欢和自己在创建 ssh 密钥时填写的名字一样。</p>
<p>然后将刚刚复制的密钥内容粘贴到下方文本框中，保存即可。</p>
</li>
<li>
<p><strong>测试 ssh 连接</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>第一次使用该密钥连接时会询问是否继续连接，输入<code>yes</code>回车确认即可，最后如果看到如下输出则说明配置成功了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi You! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-其他配置">2. 其他配置</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;&lt;你的用户名&gt;&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;&lt;你的邮箱&gt;&quot;</span></span><br><span class="line">git config --global core.quotepath <span class="literal">false</span>		<span class="comment"># 解决中文路径显示乱码的问题</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Git</tag>
        <tag>安装</tag>
        <tag>配置</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境一般软件安装方法</title>
    <url>//posts/9f09e5f1/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>在刚开始学习使用 Linux 系统的时候，估计大家都在网上搜索过类似于如何在 Linux 上安装某某软件之类的问题，而且通常需要指明自己所使用的 Linux 发行版才能得到一个实际可行的解决方法。而且当你想要安装另一个不同的软件的时候，你又会像之前一样重新搜索一遍，你是否会发现实际上它们的安装方法都非常类似。</p>
<p>实际上，在 Linux 上安装某个软件，大概就是三种方法，最快速方便的方法就是使用<strong>包管理器</strong>进行安装；第二种是下载软件厂商已经为你编译好的<strong>二进制文件</strong>到系统进行安装；第三种是最耗时间也是出错率比较高的一种安装方法，即下载软件<strong>源代码</strong>，自行编译安装。</p>
<p>使用包管理器进行安装最为方便，但缺点其实也是最多的。对于初学者来说，由于本身对于包管理器没有一个清晰的认识，所以当你到另一个使用不同的包管理器的 Linux 系统上时就可能会无从下手，这也是为什么当你搜索一个软件安装教程的时候通常需要指定实际 Linux 的发行版名称才能得到一个比较可行的教程。另外，实际上包管理器就相当于你手机的应用商店，它的所有软件资源实际上是统一放在一个服务器中供包管理器使用的，由于这个服务器中的软件往往并不是和该软件官网发布的版本同步更新的，所以这也就导致你通过包管理器进行安装的软件要比该软件官网当前版本落后几个版本。</p>
<p>而使用二进制文件或者是使用源代码编译的方式进行安装，则不会有上述两个缺点，但相反要对软件的工作方式以及编译方法比较了解。</p>
<div class="note info flat"><p>本篇将着重介绍包管理器以及使用包管理器的软件安装方法，而使用二进制文件以及源代码编译的安装方式则简单介绍一下，特别是源代码编译的安装方式，由于各种软件编写方式不同，所以它们通过源代码编译的安装方式多多少少也有一点区别，对于某些软件我将会单独写一篇文章来介绍如何通过二进制文件或者源代码编译的方式进行安装，本篇中主要介绍通过包管理器安装软件的通用方法。</p>
</div>
<h2 id="一、包管理器安装">一、包管理器安装</h2>
<p>包管理器一般有两部分，一个是包管理器本身，另一个是包管理器的前端。比如在 Ubuntu 中，包管理器就是 dpkg，而其前端通常是 apt。二者的区别大概就是：包管理器本身如 dpkg 只负责安装现有的安装包，而包管理器的前端通常是从远程服务器下载对应安装包到系统上，然后调用包管理器来对软件进行安装。我们通常都是使用前端在远程获取安装包，但有时当远程服务器没有这个软件的时候，此时如果该软件官网提供了对应包管理器的安装包，我们也可以直接下载这样的安装包，然后使用包管理器进行安装。</p>
<p>比较常见的包管理器及其前端以及它们的使用方法如下：</p>
<div class="tabs" id="package_managers"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#package_managers-1">DPKG</button></li><li class="tab"><button type="button" data-href="#package_managers-2">RPM</button></li><li class="tab"><button type="button" data-href="#package_managers-3">PACMAN</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="package_managers-1"><p>dpkg 是 Debian Linux 家族的基础包管理系统，它用于安装、删除、存储和提供<code>.deb</code>包的信息。</p>
<blockquote>
<p><strong>常用命令</strong>：</p>
<p>参考：<a href="https://www.linuxcool.com/dpkg">dpkg命令 – 管理软件安装包 – Linux命令大全(手册) (linuxcool.com)</a></p>
</blockquote>
<p><strong>前端管理器</strong>：APT</p>
<p>由于 APT 比较常用，所以此处仅介绍 APT。</p>
<p>这个是一个 dpkg 包管理系统的前端工具，它是一个非常受欢迎的、自由而强大的，有用的命令行包管理器系统。</p>
<p>Debian 及其衍生版，例如 Ubuntu 和 Linux Mint 的用户应该非常熟悉这个包管理工具。</p>
<blockquote>
<p><strong>常用命令</strong>：</p>
<p>参考：<a href="https://www.linuxcool.com/apt-get">apt-get命令 – 管理服务软件 – Linux命令大全(手册) (linuxcool.com)</a></p>
</blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="package_managers-2"><p>这个是红帽创建的 Linux 基本标准（LSB）打包格式和基础包管理系统。</p>
<blockquote>
<p><strong>常用命令</strong>：</p>
<p><a href="https://www.linuxcool.com/rpm">rpm命令 – RPM软件包管理器 – Linux命令大全(手册) (linuxcool.com)</a></p>
</blockquote>
<p><strong>前端管理器</strong>：YUM</p>
<p>这个是一个开源、流行的命令行包管理器，它是用户使用 RPM 的界面（之一）。你可以把它和 Debian Linux 系统中的 APT 进行对比，它和 APT 拥有相同的功能。</p>
<blockquote>
<p><strong>常用命令</strong>：</p>
<p><a href="https://www.linuxcool.com/yum">yum命令 – 基于RPM的软件包管理器 – Linux命令大全(手册) (linuxcool.com)</a></p>
</blockquote>
<p><strong>前端管理器</strong>：DNF</p>
<p>这个也是一个用于基于 RPM 的发行版的包管理器，Fedora 18 引入了它，它是下一代 YUM。</p>
<p>如果你用 Fedora 22 及更新版本，你肯定知道它是默认的包管理器。</p>
<blockquote>
<p><strong>常用命令</strong>：</p>
<p><a href="https://www.linuxcool.com/dnf">dnf命令 – 新一代的软件包管理器 – Linux命令大全(手册) (linuxcool.com)</a></p>
</blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="package_managers-3"><p>这个是一个流行的、强大而易用的包管理器，它用于 Arch Linux 和其他的一些小众发行版。它提供了一些其他包管理器提供的基本功能，包括安装、自动解决依赖关系、升级、卸载和降级软件。</p>
<blockquote>
<p><strong>常用命令</strong>：</p>
<p><a href="https://www.linuxcool.com/pacman">pacman命令 – 软件包管理器 – Linux命令大全(手册) (linuxcool.com)</a></p>
</blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<div class="note primary flat"><p><strong>关于依赖</strong></p>
<p>Linux 和 Windows 的一个不同的地方就在于：Windows 中所安装的软件包会将自己所用到的所有的例如第三方库之类的依赖和自己的软件主体一起打包到一个安装包中，这方便了开发人员也方便了使用用户，但是却可能造成一个问题，就是有可能你某个软件里使用到了的依赖另一个软件中也用到了，但是它们在系统中却占有两份空间。而 Linux 则采用与之不同的方案，就是当你安装一个软件的时候，需要先安装好该软件的所有依赖才能正常运行，而依赖可能也有依赖，依次类推。这样的方式使软件的空间占有率得以下降，但相反的在安装时需要注意的地方就多了。</p>
<p>当你使用包管理器安装软件的时候，大多数的包管理器都可以自动处理依赖关系，当你安装软件时，包管理器会自动为你安装该软件的所有能找到的依赖，所以通常不用过多担心。实际上，即使没有自动为你安装依赖，在安装时包管理器也会提醒你缺哪些依赖，你再像安装一般软件一样安装依赖就可以了。</p>
</div>
<h2 id="二、二进制文件安装">二、二进制文件安装</h2>
<p>使用二进制文件安装软件是一个不错的选择，既可以安装到最新（或较新）的软件，过程也比较简单和通用。一般的二进制软件安装过程如下：</p>
<ul>
<li>下载二进制软件，并将其解压，解压包通常放置在一个统一的目录方便管理（通常会选择在<code>/opt/</code>目录）</li>
<li>将解压包中的可执行程序添加软链到系统查找目录（如<code>/usr/local/bin/</code>、<code>/usr/bin/</code>等）</li>
<li>在任意目录测试该可执行程序是否可以正常执行</li>
</ul>
<h2 id="三、源代码编译安装">三、源代码编译安装</h2>
<p>该方法的灵活性就比较高了，但也有基本操作步骤：</p>
<ul>
<li>下载源代码</li>
<li>配置编译条件</li>
<li>编译、安装</li>
</ul>
<p>从源代码的下载方式，到编译条件的配置方式以及最后编译以及安装的方式都各不相同，就不在此多废话，具体的软件的源代码编译安装方法就去找对应的软件安装教程即可，但还是要提一句，在 Linux 上最常见的软件还是使用 C/C++ 编写的，并且它们的配置以及编译安装的方式也都差不多，通常保证你的系统里有 gcc、g++、make 这几个软件就可以完成编译了。</p>
<h2 id="推荐">推荐</h2>
<div class="note info flat"><p><strong>通过下方链接可以前往本博客已经提供的使用二进制文件方法或者源代码编译方法的安装教程：</strong></p>
<ul>
<li><a href="/posts/4446d03b/">Git</a></li>
<li><a href="/posts/358aad2/">nodejs</a></li>
</ul>
</div>
]]></content>
      <categories>
        <category>Linux</category>
        <category>基本使用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>教程</tag>
        <tag>软件安装</tag>
      </tags>
  </entry>
</search>
